###############################################################################
# Copyright 2000, 2006 Visual Systems Corporation.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the GNU Public License version 2
# which accompanies this distribution in a file named "COPYING".
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#      
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#      
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
###############################################################################
# Input to OQLParserTest test case.
# Lines beginning with '>' are input queries. 
# Lines starting with '<' are expected results. 
# '!' in place of '<' for the expected results will cause the expected results to be printed.
# Other lines are ignored.

>Doe.name.someArray[1]
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IndexedExprAST{mExpr=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="name", mArgList=null}, mMethodName="someArray", mArgList=null}, mIndex=LongLiteralAST{mValue=1}}}]}

>define query xyz(int parm1, short parm2) as select * from y;
<QueryProgramAST{mQueriesAndDeclarations=[DefineQueryAST{mName="xyz", mParams=ParameterListAST{mTypes=[TypeAST{mTokenType=TokenType{mName="identifier"}, mIdent1="int", mIdent2=null, mSubType1=null, mSubType2=null}, TypeAST{mTokenType=TokenType{mName="short"}, mIdent1=null, mIdent2=null, mSubType1=null, mSubType2=null}], mNames=["parm1", "parm2"]}, mQuery=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="y"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}, mIsPersistent=false}]}

>undefine query xyz;
<QueryProgramAST{mQueriesAndDeclarations=[UndefineQueryAST{mQueryName="xyz"}]}

>44
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=LongLiteralAST{mValue=44}}]}

>1 * 2 + 3
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=LongLiteralAST{mValue=1}, mRightExpr=LongLiteralAST{mValue=2}, mOp=TokenType{mName="*"}}, mRightExpr=LongLiteralAST{mValue=3}, mOp=TokenType{mName="+"}}}]}

>(5 * 4 + 6)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=LongLiteralAST{mValue=5}, mRightExpr=LongLiteralAST{mValue=4}, mOp=TokenType{mName="*"}}, mRightExpr=LongLiteralAST{mValue=6}, mOp=TokenType{mName="+"}}}}]}

>Persons
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IdentifierExprAST{mIdentifier="Persons"}}]}

>method()
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IdentifierWithArgumentsAST{mIdent="method", mFieldList=null, mValueList=ValueListAST{mValues=java.util.Collections$EmptyList[]}, mIsObjectConstruction=null}}]}

>method(sd,12)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IdentifierWithArgumentsAST{mIdent="method", mFieldList=null, mValueList=ValueListAST{mValues=[IdentifierExprAST{mIdentifier="sd"}, LongLiteralAST{mValue=12}]}, mIsObjectConstruction=null}}]}

>p.methodcall()
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mMethodName="methodcall", mArgList=ValueListAST{mValues=java.util.Collections$EmptyList[]}}}]}

>p.methodcall(12,43)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mMethodName="methodcall", mArgList=ValueListAST{mValues=[LongLiteralAST{mValue=12}, LongLiteralAST{mValue=43}]}}}]}

>p.methodcall(12, b)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mMethodName="methodcall", mArgList=ValueListAST{mValues=[LongLiteralAST{mValue=12}, IdentifierExprAST{mIdentifier="b"}]}}}]}

>p.methodcall(12, b.o)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mMethodName="methodcall", mArgList=ValueListAST{mValues=[LongLiteralAST{mValue=12}, MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="b"}, mMethodName="o", mArgList=null}]}}}]}

>a.p.methodcall()
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="a"}, mMethodName="p", mArgList=null}, mMethodName="methodcall", mArgList=ValueListAST{mValues=java.util.Collections$EmptyList[]}}}]}

>a.p.methodcall(12,43)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="a"}, mMethodName="p", mArgList=null}, mMethodName="methodcall", mArgList=ValueListAST{mValues=[LongLiteralAST{mValue=12}, LongLiteralAST{mValue=43}]}}}]}

>a.p.methodcall(12, b)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="a"}, mMethodName="p", mArgList=null}, mMethodName="methodcall", mArgList=ValueListAST{mValues=[LongLiteralAST{mValue=12}, IdentifierExprAST{mIdentifier="b"}]}}}]}

>a.p.methodcall(12, b.o)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="a"}, mMethodName="p", mArgList=null}, mMethodName="methodcall", mArgList=ValueListAST{mValues=[LongLiteralAST{mValue=12}, MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="b"}, mMethodName="o", mArgList=null}]}}}]}

>select p from Persons p
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>Student except TA
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="Student"}, mRightExpr=IdentifierExprAST{mIdentifier="TA"}, mOp=TokenType{mName="except"}}}]}

>select ((Employee) s).salary from Student s
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=MethodCallExprAST{mExpr=QueryAST{mChildAST=CastExprAST{mType=TypeAST{mTokenType=TokenType{mName="identifier"}, mIdent1="Employee", mIdent2=null, mSubType1=null, mSubType2=null}, mExpr=IdentifierExprAST{mIdentifier="s"}}}, mMethodName="salary", mArgList=null}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Student"}, mAlias="s"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>select p from p in Persons // Verified - Should be the same as select p from Persons p
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>select p from Persons p // Verified - Should be the same as select p from p in Persons
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>select p from Persons as p  // Verified - Should be the same as select p from p in Persons
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>define jones as select distinct x from Students x where x.name = "Jones";select distinct student_id from Students
<QueryProgramAST{mQueriesAndDeclarations=[DefineQueryAST{mName="jones", mParams=null, mQuery=QueryAST{mChildAST=SelectExprAST{mIsDistinct=true, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mAlias="x"}]}, mWhereClause=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="name", mArgList=null}, mRightExpr=StringLiteralAST{mValue="Jones"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}, mIsPersistent=false}, QueryAST{mChildAST=SelectExprAST{mIsDistinct=true, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="student_id"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>select p from distinct(select distinct p from Students) as p
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=ConversionExprAST{mOp=TokenType{mName="distinct"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=true, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}}, mAlias="p"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>select p from Students d where p = distinct(d)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mAlias="d"}]}, mWhereClause=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=ConversionExprAST{mOp=TokenType{mName="distinct"}, mExpr=QueryAST{mChildAST=IdentifierExprAST{mIdentifier="d"}}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}]}

>define Does as select x from Student x where x.name = "Doe";select distinct student_id from Does
<QueryProgramAST{mQueriesAndDeclarations=[DefineQueryAST{mName="Does", mParams=null, mQuery=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Student"}, mAlias="x"}]}, mWhereClause=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="name", mArgList=null}, mRightExpr=StringLiteralAST{mValue="Doe"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}, mIsPersistent=false}, QueryAST{mChildAST=SelectExprAST{mIsDistinct=true, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="student_id"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Does"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>define Doe as element(select x from Student x where x.name = "Doe");select distinct student_id from Doe
<QueryProgramAST{mQueriesAndDeclarations=[DefineQueryAST{mName="Doe", mParams=null, mQuery=QueryAST{mChildAST=ConversionExprAST{mOp=TokenType{mName="element"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Student"}, mAlias="x"}]}, mWhereClause=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="name", mArgList=null}, mRightExpr=StringLiteralAST{mValue="Doe"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}}}, mIsPersistent=false}, QueryAST{mChildAST=SelectExprAST{mIsDistinct=true, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="student_id"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>Employee (name: Name, boss: Chairman)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IdentifierWithArgumentsAST{mIdent="Employee", mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="name", mExpr=IdentifierExprAST{mIdentifier="Name"}}, FieldAST{mFieldName="boss", mExpr=IdentifierExprAST{mIdentifier="Chairman"}}]}, mValueList=null, mIsObjectConstruction=true}}]}

>Employee (name: "Dan", boss: Chairman)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IdentifierWithArgumentsAST{mIdent="Employee", mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="name", mExpr=StringLiteralAST{mValue="Dan"}}, FieldAST{mFieldName="boss", mExpr=IdentifierExprAST{mIdentifier="Chairman"}}]}, mValueList=null, mIsObjectConstruction=true}}]}

>BigNumber (real: 2.243, realreal: -423.123e-34)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IdentifierWithArgumentsAST{mIdent="BigNumber", mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="real", mExpr=BigDecimalLiteralAST{mValue=2.243}}, FieldAST{mFieldName="realreal", mExpr=UnaryExprAST{mExpr=DoubleLiteralAST{mValue=4.23123E-32}, mOp=TokenType{mName="-"}}}]}, mValueList=null, mIsObjectConstruction=true}}]}

>Vector(data: set(1,3,10))
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IdentifierWithArgumentsAST{mIdent="Vector", mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="data", mExpr=CollectionConstructionAST{mType=TokenType{mName="set"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=1}, LongLiteralAST{mValue=3}, LongLiteralAST{mValue=10}]}}}]}, mValueList=null, mIsObjectConstruction=true}}]}

>Person(name: "Dan")
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IdentifierWithArgumentsAST{mIdent="Person", mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="name", mExpr=StringLiteralAST{mValue="Dan"}}]}, mValueList=null, mIsObjectConstruction=true}}]}

>select * from Persons p where p = Person(name: "Dan", surname: "Syrstad", age: 25)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=IdentifierWithArgumentsAST{mIdent="Person", mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="name", mExpr=StringLiteralAST{mValue="Dan"}}, FieldAST{mFieldName="surname", mExpr=StringLiteralAST{mValue="Syrstad"}}, FieldAST{mFieldName="age", mExpr=LongLiteralAST{mValue=25}}]}, mValueList=null, mIsObjectConstruction=true}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}]}

>struct(name:"Dan", age:42)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=StructConstructionAST{mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="name", mExpr=StringLiteralAST{mValue="Dan"}}, FieldAST{mFieldName="age", mExpr=LongLiteralAST{mValue=42}}]}}}]}

>set(1,2,3)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="set"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=1}, LongLiteralAST{mValue=2}, LongLiteralAST{mValue=3}]}}}]}

>set(1,2,3)<set(3,4,2,1)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=CollectionConstructionAST{mType=TokenType{mName="set"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=1}, LongLiteralAST{mValue=2}, LongLiteralAST{mValue=3}]}}, mRightExpr=CollectionConstructionAST{mType=TokenType{mName="set"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=3}, LongLiteralAST{mValue=4}, LongLiteralAST{mValue=2}, LongLiteralAST{mValue=1}]}}, mCompositePredicate=null, mOp=TokenType{mName="<"}}}]}

>list(1,2,3,4)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=1}, LongLiteralAST{mValue=2}, LongLiteralAST{mValue=3}, LongLiteralAST{mValue=4}]}}}]}

>list(a,b,c,d)[1]
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IndexedExprAST{mExpr=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ValueListAST{mValues=[IdentifierExprAST{mIdentifier="a"}, IdentifierExprAST{mIdentifier="b"}, IdentifierExprAST{mIdentifier="c"}, IdentifierExprAST{mIdentifier="d"}]}}, mIndex=LongLiteralAST{mValue=1}}}]}

>list(a,b,c,d)[1:3]
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IndexedExprAST{mExpr=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ValueListAST{mValues=[IdentifierExprAST{mIdentifier="a"}, IdentifierExprAST{mIdentifier="b"}, IdentifierExprAST{mIdentifier="c"}, IdentifierExprAST{mIdentifier="d"}]}}, mIndex=IndexRangeAST{mStartExpr=LongLiteralAST{mValue=1}, mEndExpr=LongLiteralAST{mValue=3}}}}]}

>list(1 .. 2)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ListRangeAST{mStartExpr=LongLiteralAST{mValue=1}, mEndExpr=LongLiteralAST{mValue=2}}}}]}

>listtoset(list(1,2,3,2))
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=ConversionExprAST{mOp=TokenType{mName="listtoset"}, mExpr=QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=1}, LongLiteralAST{mValue=2}, LongLiteralAST{mValue=3}, LongLiteralAST{mValue=2}]}}}}}]}

>flatten(list(1,2,3,2))
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=ConversionExprAST{mOp=TokenType{mName="flatten"}, mExpr=QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=1}, LongLiteralAST{mValue=2}, LongLiteralAST{mValue=3}, LongLiteralAST{mValue=2}]}}}}}]}

>distinct(select p from Person p)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=ConversionExprAST{mOp=TokenType{mName="distinct"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Person"}, mAlias="p"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}}}]}

>element(Persons)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=ConversionExprAST{mOp=TokenType{mName="element"}, mExpr=QueryAST{mChildAST=IdentifierExprAST{mIdentifier="Persons"}}}}]}

>bag(1,1,2,3,3)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="bag"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=1}, LongLiteralAST{mValue=1}, LongLiteralAST{mValue=2}, LongLiteralAST{mValue=3}, LongLiteralAST{mValue=3}]}}}]}

>array(3,4,2,1,1)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="array"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=3}, LongLiteralAST{mValue=4}, LongLiteralAST{mValue=2}, LongLiteralAST{mValue=1}, LongLiteralAST{mValue=1}]}}}]}

>10 < first(list(8,15,7,22))
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=LongLiteralAST{mValue=10}, mRightExpr=CollectionExprAST{mOp=TokenType{mName="first"}, mExpr=QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=8}, LongLiteralAST{mValue=15}, LongLiteralAST{mValue=7}, LongLiteralAST{mValue=22}]}}}}, mCompositePredicate=null, mOp=TokenType{mName="<"}}}]}

>10 < some(list(8,15,7,22))
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=LongLiteralAST{mValue=10}, mRightExpr=QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=8}, LongLiteralAST{mValue=15}, LongLiteralAST{mValue=7}, LongLiteralAST{mValue=22}]}}}, mCompositePredicate=TokenType{mName="any"}, mOp=TokenType{mName="<"}}}]}

>10 < some list(8,15,7,22) 
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=LongLiteralAST{mValue=10}, mRightExpr=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=8}, LongLiteralAST{mValue=15}, LongLiteralAST{mValue=7}, LongLiteralAST{mValue=22}]}}, mCompositePredicate=TokenType{mName="any"}, mOp=TokenType{mName="<"}}}]}

>10 < any array(8,15,7,22) 
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=LongLiteralAST{mValue=10}, mRightExpr=CollectionConstructionAST{mType=TokenType{mName="array"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=8}, LongLiteralAST{mValue=15}, LongLiteralAST{mValue=7}, LongLiteralAST{mValue=22}]}}, mCompositePredicate=TokenType{mName="any"}, mOp=TokenType{mName="<"}}}]}

>100 > all(bag(8,15,7,22))
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=LongLiteralAST{mValue=100}, mRightExpr=QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="bag"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=8}, LongLiteralAST{mValue=15}, LongLiteralAST{mValue=7}, LongLiteralAST{mValue=22}]}}}, mCompositePredicate=TokenType{mName="all"}, mOp=TokenType{mName=">"}}}]}

>flatten(list(set(1,2,3), set(3,4,5,6), set(7)))
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=ConversionExprAST{mOp=TokenType{mName="flatten"}, mExpr=QueryAST{mChildAST=CollectionConstructionAST{mType=TokenType{mName="list"}, mValues=ValueListAST{mValues=[CollectionConstructionAST{mType=TokenType{mName="set"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=1}, LongLiteralAST{mValue=2}, LongLiteralAST{mValue=3}]}}, CollectionConstructionAST{mType=TokenType{mName="set"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=3}, LongLiteralAST{mValue=4}, LongLiteralAST{mValue=5}, LongLiteralAST{mValue=6}]}}, CollectionConstructionAST{mType=TokenType{mName="set"}, mValues=ValueListAST{mValues=[LongLiteralAST{mValue=7}]}}]}}}}}]}

>not true
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=UnaryExprAST{mExpr=BooleanLiteralAST{mValue=true}, mOp=TokenType{mName="not"}}}]}

>count(Students) - count(TA)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=AggregateExprAST{mOp=TokenType{mName="count"}, mExpr=QueryAST{mChildAST=IdentifierExprAST{mIdentifier="Students"}}}, mRightExpr=AggregateExprAST{mOp=TokenType{mName="count"}, mExpr=QueryAST{mChildAST=IdentifierExprAST{mIdentifier="TA"}}}, mOp=TokenType{mName="-"}}}]}

>"a nice string" like "%nice%str_ng"
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=StringLiteralAST{mValue="a nice string"}, mRightExpr=StringLiteralAST{mValue="%nice%str_ng"}, mCompositePredicate=null, mOp=TokenType{mName="like"}}}]}

>Doe = element(select s from Students s where s.name="Doe")
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="Doe"}, mRightExpr=ConversionExprAST{mOp=TokenType{mName="element"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="s"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mAlias="s"}]}, mWhereClause=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="s"}, mMethodName="name", mArgList=null}, mRightExpr=StringLiteralAST{mValue="Doe"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}}]}

>Doe.name 
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="name", mArgList=null}}]}

>Doe.name.toLowerCase
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="name", mArgList=null}, mMethodName="toLowerCase", mArgList=null}}]}

>Doe.name.toLowerCase()
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="name", mArgList=null}, mMethodName="toLowerCase", mArgList=ValueListAST{mValues=java.util.Collections$EmptyList[]}}}]}

>Doe.name.substring(123)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="name", mArgList=null}, mMethodName="substring", mArgList=ValueListAST{mValues=[LongLiteralAST{mValue=123}]}}}]}

>Doe.name.someArray[1]
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IndexedExprAST{mExpr=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="name", mArgList=null}, mMethodName="someArray", mArgList=null}, mIndex=LongLiteralAST{mValue=1}}}]}

>((octet) o)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=CastExprAST{mType=TypeAST{mTokenType=TokenType{mName="octet"}, mIdent1=null, mIdent2=null, mSubType1=null, mSubType2=null}, mExpr=IdentifierExprAST{mIdentifier="o"}}}}]}

>(octet) o
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=CastExprAST{mType=TypeAST{mTokenType=TokenType{mName="octet"}, mIdent1=null, mIdent2=null, mSubType1=null, mSubType2=null}, mExpr=IdentifierExprAST{mIdentifier="o"}}}]}

>((Mama) m)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=CastExprAST{mType=TypeAST{mTokenType=TokenType{mName="identifier"}, mIdent1="Mama", mIdent2=null, mSubType1=null, mSubType2=null}, mExpr=IdentifierExprAST{mIdentifier="m"}}}}]}

>(Employee) student
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=CastExprAST{mType=TypeAST{mTokenType=TokenType{mName="identifier"}, mIdent1="Employee", mIdent2=null, mSubType1=null, mSubType2=null}, mExpr=IdentifierExprAST{mIdentifier="student"}}}]}

>Doe->spouse != nil and Doe ->spouse->name = "Carol"
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="spouse", mArgList=null}, mRightExpr=NilLiteralAST{}, mCompositePredicate=null, mOp=TokenType{mName="!="}}, mRightExpr=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="spouse", mArgList=null}, mMethodName="name", mArgList=null}, mRightExpr=StringLiteralAST{mValue="Carol"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mOp=TokenType{mName="and"}}}]}

>jones -> number_of_students
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="jones"}, mMethodName="number_of_students", mArgList=null}}]}

>Syrstad in Persons
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=InExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="Syrstad"}, mRightExpr=IdentifierExprAST{mIdentifier="Persons"}}}]}

>Doe->apply_course("Math", Turing)->number
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="apply_course", mArgList=ValueListAST{mValues=[StringLiteralAST{mValue="Math"}, IdentifierExprAST{mIdentifier="Turing"}]}}, mMethodName="number", mArgList=null}}]}

>for all x in Students: x.student_id > 0
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QuantifierExprAST{mInClause=InClauseAST{mIdent="x", mExpr=IdentifierExprAST{mIdentifier="Students"}}, mRightExpr=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="student_id", mArgList=null}, mRightExpr=LongLiteralAST{mValue=0}, mCompositePredicate=null, mOp=TokenType{mName=">"}}, mIsUniversal=true}}]}

>exists x in Doe.takes: x.taught_by.name = "Turing"
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QuantifierExprAST{mInClause=InClauseAST{mIdent="x", mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Doe"}, mMethodName="takes", mArgList=null}}, mRightExpr=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="taught_by", mArgList=null}, mMethodName="name", mArgList=null}, mRightExpr=StringLiteralAST{mValue="Turing"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mIsUniversal=false}}]}

>max(select salary from professors)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=AggregateExprAST{mOp=TokenType{mName="max"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="salary"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="professors"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}}}]}

>select couple(student: x.name, professor: z.name) from Students as x,   x.takes as y,   y.taught_by as z where z.rank = "full professor"
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierWithArgumentsAST{mIdent="couple", mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="student", mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="name", mArgList=null}}, FieldAST{mFieldName="professor", mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="z"}, mMethodName="name", mArgList=null}}]}, mValueList=null, mIsObjectConstruction=true}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mAlias="x"}, IteratorDefAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="takes", mArgList=null}, mAlias="y"}, IteratorDefAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="y"}, mMethodName="taught_by", mArgList=null}, mAlias="z"}]}, mWhereClause=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="z"}, mMethodName="rank", mArgList=null}, mRightExpr=StringLiteralAST{mValue="full professor"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}]}

>select * from Students as x
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mAlias="x"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>select p from Persons p order by p.age, p.name
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=SortCriteriaAST{mCriteria=[SortCriterionAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mMethodName="age", mArgList=null}, mAscending=true}, SortCriterionAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mMethodName="name", mArgList=null}, mAscending=true}]}}}]}

>select couples(student: Students.name, professor: z.name) from Students,  Students.takes y,  y.taught_by z where z.rank = "full professor"
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierWithArgumentsAST{mIdent="couples", mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="student", mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mMethodName="name", mArgList=null}}, FieldAST{mFieldName="professor", mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="z"}, mMethodName="name", mArgList=null}}]}, mValueList=null, mIsObjectConstruction=true}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mAlias=null}, IteratorDefAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="Students"}, mMethodName="takes", mArgList=null}, mAlias="y"}, IteratorDefAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="y"}, mMethodName="taught_by", mArgList=null}, mAlias="z"}]}, mWhereClause=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="z"}, mMethodName="rank", mArgList=null}, mRightExpr=StringLiteralAST{mValue="full professor"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}]}

>select * from Employees e  group by low: salary < 1000, medium: salary >= 1000 and salary < 10000, high: salary >= 10000
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Employees"}, mAlias="e"}]}, mWhereClause=null, mGroupByClause=GroupClauseAST{mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="low", mExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="salary"}, mRightExpr=LongLiteralAST{mValue=1000}, mCompositePredicate=null, mOp=TokenType{mName="<"}}}, FieldAST{mFieldName="medium", mExpr=BinOpExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="salary"}, mRightExpr=LongLiteralAST{mValue=1000}, mCompositePredicate=null, mOp=TokenType{mName=">="}}, mRightExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="salary"}, mRightExpr=LongLiteralAST{mValue=10000}, mCompositePredicate=null, mOp=TokenType{mName="<"}}, mOp=TokenType{mName="and"}}}, FieldAST{mFieldName="high", mExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="salary"}, mRightExpr=LongLiteralAST{mValue=10000}, mCompositePredicate=null, mOp=TokenType{mName=">="}}}]}, mHaving=null}, mOrderByClause=null}}]}

>select department,  avg_salary: avg(select e.salary from partition) from Employees e  group by department:e.deptno  having avg(select e.salary from partition) > 30000
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="department"}, mAlias=null}, ProjectionAST{mExpr=AggregateExprAST{mOp=TokenType{mName="avg"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="e"}, mMethodName="salary", mArgList=null}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="partition"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}}, mAlias="avg_salary"}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Employees"}, mAlias="e"}]}, mWhereClause=null, mGroupByClause=GroupClauseAST{mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="department", mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="e"}, mMethodName="deptno", mArgList=null}}]}, mHaving=RelationalExprAST{mLeftExpr=AggregateExprAST{mOp=TokenType{mName="avg"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="e"}, mMethodName="salary", mArgList=null}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="partition"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}}, mRightExpr=LongLiteralAST{mValue=30000}, mCompositePredicate=null, mOp=TokenType{mName=">"}}}, mOrderByClause=null}}]}

>select * from Persons order by age desc, name asc, department
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=SortCriteriaAST{mCriteria=[SortCriterionAST{mExpr=IdentifierExprAST{mIdentifier="age"}, mAscending=false}, SortCriterionAST{mExpr=IdentifierExprAST{mIdentifier="name"}, mAscending=true}, SortCriterionAST{mExpr=IdentifierExprAST{mIdentifier="department"}, mAscending=true}]}}}]}

>a+ b
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}]}

>1+2
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=LongLiteralAST{mValue=1}, mRightExpr=LongLiteralAST{mValue=2}, mOp=TokenType{mName="+"}}}]}

>(1+2)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=LongLiteralAST{mValue=1}, mRightExpr=LongLiteralAST{mValue=2}, mOp=TokenType{mName="+"}}}}]}

>(a+b)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}}]}

>a+b*c
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="b"}, mRightExpr=IdentifierExprAST{mIdentifier="c"}, mOp=TokenType{mName="*"}}, mOp=TokenType{mName="+"}}}]}

>(a+b)*c
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mRightExpr=IdentifierExprAST{mIdentifier="c"}, mOp=TokenType{mName="*"}}}]}

>c*(a+b)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mOp=TokenType{mName="*"}}}]}

>(c*(a+b)*d)+w
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mOp=TokenType{mName="*"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mOp=TokenType{mName="*"}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mOp=TokenType{mName="+"}}}]}

>((c*(a+b)*d)+w)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mOp=TokenType{mName="*"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mOp=TokenType{mName="*"}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mOp=TokenType{mName="+"}}}}]}

>((a+b)*c)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mRightExpr=IdentifierExprAST{mIdentifier="c"}, mOp=TokenType{mName="*"}}}}]}

>(c and (a or b) and d) or w
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="or"}}}, mOp=TokenType{mName="and"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mOp=TokenType{mName="and"}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mOp=TokenType{mName="or"}}}]}

>((c and (a or b) and d) or w)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="or"}}}, mOp=TokenType{mName="and"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mOp=TokenType{mName="and"}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mOp=TokenType{mName="or"}}}}]}

>(c = (a+b) < d) > w
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=QueryAST{mChildAST=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=RelationalExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mCompositePredicate=null, mOp=TokenType{mName="<"}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mCompositePredicate=null, mOp=TokenType{mName=">"}}}]}

>(c > (a < b) >= d) = w
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=QueryAST{mChildAST=RelationalExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mCompositePredicate=null, mOp=TokenType{mName="<"}}}, mCompositePredicate=null, mOp=TokenType{mName=">"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mCompositePredicate=null, mOp=TokenType{mName=">="}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}}]}

>w = (c > (a < b) >= d)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="w"}, mRightExpr=QueryAST{mChildAST=RelationalExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mCompositePredicate=null, mOp=TokenType{mName="<"}}}, mCompositePredicate=null, mOp=TokenType{mName=">"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mCompositePredicate=null, mOp=TokenType{mName=">="}}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}}]}

>((c > (a < b) >= d) = w)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=RelationalExprAST{mLeftExpr=QueryAST{mChildAST=RelationalExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mCompositePredicate=null, mOp=TokenType{mName="<"}}}, mCompositePredicate=null, mOp=TokenType{mName=">"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mCompositePredicate=null, mOp=TokenType{mName=">="}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}}}]}

>p = (c*(a+b)*d)+w
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mOp=TokenType{mName="*"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mOp=TokenType{mName="*"}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mOp=TokenType{mName="+"}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}}]}

>(c*(a+b)*d)+w = p
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mOp=TokenType{mName="*"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mOp=TokenType{mName="*"}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mOp=TokenType{mName="+"}}, mRightExpr=IdentifierExprAST{mIdentifier="p"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}}]}

>((c*(a+b)*d)+w) = p
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=RelationalExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mOp=TokenType{mName="*"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mOp=TokenType{mName="*"}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mOp=TokenType{mName="+"}}}, mRightExpr=IdentifierExprAST{mIdentifier="p"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}}]}

>(((c*(a+b)*d)+w) = p)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=QueryAST{mChildAST=RelationalExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="c"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mOp=TokenType{mName="*"}}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mOp=TokenType{mName="*"}}}, mRightExpr=IdentifierExprAST{mIdentifier="w"}, mOp=TokenType{mName="+"}}}, mRightExpr=IdentifierExprAST{mIdentifier="p"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}}}]}

>select * from Persons p where p = a + b
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}]}

>select * from Persons p where p = 4 + 2
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=BinOpExprAST{mLeftExpr=LongLiteralAST{mValue=4}, mRightExpr=LongLiteralAST{mValue=2}, mOp=TokenType{mName="+"}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}]}

>select * from Persons p where p = (a + b)*c
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="+"}}}, mRightExpr=IdentifierExprAST{mIdentifier="c"}, mOp=TokenType{mName="*"}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}]}

>select * from Persons p where p = (4 + 2)*21
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=BinOpExprAST{mLeftExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=LongLiteralAST{mValue=4}, mRightExpr=LongLiteralAST{mValue=2}, mOp=TokenType{mName="+"}}}, mRightExpr=LongLiteralAST{mValue=21}, mOp=TokenType{mName="*"}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mGroupByClause=null, mOrderByClause=null}}]}

>select * from Persons p where p = (a or b) or c
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=BinOpExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="or"}}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mRightExpr=IdentifierExprAST{mIdentifier="c"}, mOp=TokenType{mName="or"}}, mGroupByClause=null, mOrderByClause=null}}]}

>select * from Persons p where p = (a and b) or c
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=BinOpExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="and"}}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mRightExpr=IdentifierExprAST{mIdentifier="c"}, mOp=TokenType{mName="or"}}, mGroupByClause=null, mOrderByClause=null}}]}

>select * from Persons p where p = (a or b) and c
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=BinOpExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="a"}, mRightExpr=IdentifierExprAST{mIdentifier="b"}, mOp=TokenType{mName="or"}}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mRightExpr=IdentifierExprAST{mIdentifier="c"}, mOp=TokenType{mName="and"}}, mGroupByClause=null, mOrderByClause=null}}]}

>select * from Persons p where p = (4 and d) or 2
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=null}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=BinOpExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="p"}, mRightExpr=QueryAST{mChildAST=BinOpExprAST{mLeftExpr=LongLiteralAST{mValue=4}, mRightExpr=IdentifierExprAST{mIdentifier="d"}, mOp=TokenType{mName="and"}}}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mRightExpr=LongLiteralAST{mValue=2}, mOp=TokenType{mName="or"}}, mGroupByClause=null, mOrderByClause=null}}]}

>element(select x  from Courses x  where x.name = "Math" and x.number = 101).requires[2]
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=IndexedExprAST{mExpr=MethodCallExprAST{mExpr=ConversionExprAST{mOp=TokenType{mName="element"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Courses"}, mAlias="x"}]}, mWhereClause=BinOpExprAST{mLeftExpr=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="name", mArgList=null}, mRightExpr=StringLiteralAST{mValue="Math"}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mRightExpr=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="number", mArgList=null}, mRightExpr=LongLiteralAST{mValue=101}, mCompositePredicate=null, mOp=TokenType{mName="=="}}, mOp=TokenType{mName="and"}}, mGroupByClause=null, mOrderByClause=null}}}, mMethodName="requires", mArgList=null}, mIndex=LongLiteralAST{mValue=2}}}]}

>select s.year from Student s where s in (select sec.assistant from Sections sec)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="s"}, mMethodName="year", mArgList=null}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Student"}, mAlias="s"}]}, mWhereClause=InExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="s"}, mRightExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="sec"}, mMethodName="assistant", mArgList=null}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Sections"}, mAlias="sec"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}}, mGroupByClause=null, mOrderByClause=null}}]}

>select ((Employee) s).salary from Student s where s in (select sec.assistant from Sections sec)
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=MethodCallExprAST{mExpr=QueryAST{mChildAST=CastExprAST{mType=TypeAST{mTokenType=TokenType{mName="identifier"}, mIdent1="Employee", mIdent2=null, mSubType1=null, mSubType2=null}, mExpr=IdentifierExprAST{mIdentifier="s"}}}, mMethodName="salary", mArgList=null}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Student"}, mAlias="s"}]}, mWhereClause=InExprAST{mLeftExpr=IdentifierExprAST{mIdentifier="s"}, mRightExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="sec"}, mMethodName="assistant", mArgList=null}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Sections"}, mAlias="sec"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}}, mGroupByClause=null, mOrderByClause=null}}]}

>select p from Persons p where p.address in (select address from Addresses address where address.city in (select city from Zones z, z.city city))
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias="p"}]}, mWhereClause=InExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mMethodName="address", mArgList=null}, mRightExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="address"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Addresses"}, mAlias="address"}]}, mWhereClause=InExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="address"}, mMethodName="city", mArgList=null}, mRightExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="city"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Zones"}, mAlias="z"}, IteratorDefAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="z"}, mMethodName="city", mArgList=null}, mAlias="city"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}}, mGroupByClause=null, mOrderByClause=null}}}, mGroupByClause=null, mOrderByClause=null}}]}

>select distinct p.name from (select d from House d where for all x in House: x.value > 1000) as p
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=true, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="p"}, mMethodName="name", mArgList=null}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="d"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="House"}, mAlias="d"}]}, mWhereClause=QuantifierExprAST{mInClause=InClauseAST{mIdent="x", mExpr=IdentifierExprAST{mIdentifier="House"}}, mRightExpr=RelationalExprAST{mLeftExpr=MethodCallExprAST{mExpr=IdentifierExprAST{mIdentifier="x"}, mMethodName="value", mArgList=null}, mRightExpr=LongLiteralAST{mValue=1000}, mCompositePredicate=null, mOp=TokenType{mName=">"}}, mIsUniversal=true}, mGroupByClause=null, mOrderByClause=null}}, mAlias="p"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}]}

>select scope1 from Persons,     Cities c where exists(select scope2 from children as child)       or count(select scope3, (select scope4 from partition)               from children p,                     scope5 v               group by age: scope6              )
<QueryProgramAST{mQueriesAndDeclarations=[QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="scope1"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Persons"}, mAlias=null}, IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="Cities"}, mAlias="c"}]}, mWhereClause=BinOpExprAST{mLeftExpr=CollectionExprAST{mOp=TokenType{mName="exists"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="scope2"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="children"}, mAlias="child"}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}}, mRightExpr=AggregateExprAST{mOp=TokenType{mName="count"}, mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="scope3"}, mAlias=null}, ProjectionAST{mExpr=QueryAST{mChildAST=SelectExprAST{mIsDistinct=false, mProjectionAttributes=ProjectionAttributesAST{mProjectionList=ProjectionListAST{mProjections=[ProjectionAST{mExpr=IdentifierExprAST{mIdentifier="scope4"}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="partition"}, mAlias=null}]}, mWhereClause=null, mGroupByClause=null, mOrderByClause=null}}, mAlias=null}]}}, mFromClause=FromClauseAST{mIteratorDefs=[IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="children"}, mAlias="p"}, IteratorDefAST{mExpr=IdentifierExprAST{mIdentifier="scope5"}, mAlias="v"}]}, mWhereClause=null, mGroupByClause=GroupClauseAST{mFieldList=FieldListAST{mFields=[FieldAST{mFieldName="age", mExpr=IdentifierExprAST{mIdentifier="scope6"}}]}, mHaving=null}, mOrderByClause=null}}}, mOp=TokenType{mName="or"}}, mGroupByClause=null, mOrderByClause=null}}]}

>import x
<QueryProgramAST{mQueriesAndDeclarations=[ImportAST{mQualifiedName=QualifiedNameAST{mComponents=["x"]}, mAlias=null}]}

>import x.y.z
<QueryProgramAST{mQueriesAndDeclarations=[ImportAST{mQualifiedName=QualifiedNameAST{mComponents=["x", "y", "z"]}, mAlias=null}]}

>import x as al
<QueryProgramAST{mQueriesAndDeclarations=[ImportAST{mQualifiedName=QualifiedNameAST{mComponents=["x"]}, mAlias="al"}]}

>import x.y.z as al
<QueryProgramAST{mQueriesAndDeclarations=[ImportAST{mQualifiedName=QualifiedNameAST{mComponents=["x", "y", "z"]}, mAlias="al"}]}

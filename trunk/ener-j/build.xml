<?xml version="1.0" encoding="UTF-8"?>
<!--
   ANT Build script for Ener-J
   Copyright 2002-2006 Visual Systems Corporation
   $Header: /cvsroot/ener-j/ener-j/build.xml,v 1.11 2006/06/06 21:29:33 dsyrstad Exp $

Build Instructions:
   To build, run

   ant <target>

   in the directory where this file is located with the target you want.

Available targets:

 - compile  -> compile source classes and places result in "classes" directory
 - jar      -> Create file "lib/ener-j.jar"
 - apidocs  -> Build API documentation (javadoc) in "docs/api"
-->

<project basedir="." default="all" name="ener-j">

    <!-- Allow any user specific values to override the defaults -->
    <property file="${user.home}/build.properties"/>
    <!-- Allow user defaults for this project -->
    <property file="build.properties"/>
    <!-- Set default values for the build -->
    <property file="default.properties"/>

    <target name="init">
        <property name="EnerJVersion" value="0.01"/>
        <property name="name" value="Ener-J"/>
        <property name="jarname" value="enerj"/>
        <property name="agent-jarname" value="enerjenh"/>
        <property name="packages" value="org.enerj.*"/>
        <property name="src.dir" value="${basedir}/src"/>
        <property name="testsrc.dir" value="${basedir}/test"/>
        <property name="build.dest" value="${basedir}/classes"/>
        <property name="build.testdest" value="${basedir}/testClasses"/>
        <property name="examples.dir" value="${basedir}/examples"/>
        <property name="docs.dir" value="${basedir}/docs"/>
        <property name="lib.dir" value="${basedir}/lib"/>
        <property name="apidocs.dir" value="${docs.dir}/api"/>
        <property name="databases.dir" value="${basedir}/databases"/>
    	<property name="junit.jar" value="${lib.dir}/junit-3.8.1.jar" />
    	<property name="asm.jar" value="${lib.dir}/asm-3.0.jar" />
    	<property name="agent.jar" value="${lib.dir}/${agent-jarname}.jar" />
        <property name="class.path" value="${build.dest}:${junit.jar}:${asm.jar}"/>
        <property name="sourceLevel" value="1.5"/>
        <property name="jvmopts"  value="-Xverify:none -XX:+UseParallelGC -XX:PermSize=20M -XX:MaxNewSize=32M -XX:NewSize=32M -Xms256m -Xmx512m" />

    </target>

    <target name="compile-src" depends="init" >
        <mkdir dir="${build.dest}"/>
        <javac classpath="${class.path}" debug="true" source="${sourceLevel}" destdir="${build.dest}" srcdir="${src.dir}">
        </javac>

    	<!-- This isn't necessary: copy file="${src.dir}/org/enerj/core/CorePersistables.meta" todir="${build.dest}/org/enerj/core" / -->
		<echo message="Copying properties..." />
    	<copy todir="${build.dest}" >
        	<fileset dir="${src.dir}" casesensitive="yes">
        	  <include name="**/*.properties"/>
          	  <include name="**/*.meta"/>
        	  <include name="**/*.gif"/>
        	  <include name="**/*.png"/>
        	  <include name="**/*.jpg"/>
        	</fileset>
    	</copy>

    	<mkdir dir="${build.testdest}"/>
        <javac classpath="${class.path}:${java.class.path}" debug="true" source="${sourceLevel}" destdir="${build.testdest}" srcdir="${testsrc.dir}">
        </javac>
        
    	<copy todir="${build.testdest}" >
        	<fileset dir="${testsrc.dir}" casesensitive="yes">
        	  <include name="**/*.properties"/>
        	  <include name="**/*.meta"/>
        	</fileset>
    	</copy>
    </target>
    
    <target name="compile" depends="jar-agent" />

	<target name="enhance-compile" depends="compile-src" >
        <!-- Enhance Ener-J persistent classes -->
        <echo message="Enhancing Core..."/>
        <fileset id="src-metafiles-fileset" dir="${src.dir}" includes="**/*.meta" />
        <pathconvert pathsep=" " property="src-metafiles" refid="src-metafiles-fileset" />
    	<echo>${src-metafiles}</echo>
        <java classname="org.enerj.enhancer.Enhancer" failonerror="true" fork="true">
            <classpath>
                <pathelement location="${build.dest}"/>
                <pathelement location="${asm.jar}"/>
            </classpath>
            <sysproperty key="ANT" value=""/>
            <arg value="--debug" />
            <arg value="--sourcepath" />
                <arg path="${build.dest}" />
            <arg value="--inplace" />
            <arg line="${src-metafiles}" />
        </java>

        <!-- Enhance Ener-J JUnit test classes -->
        <echo message="Enhancing Tests..."/>
        <fileset id="test-metafiles-fileset" dir="${testsrc.dir}" includes="**/*.meta" 
            excludes="**/MetadataTest*.meta **/PersistentFieldsTest*Override.meta" />
        <pathconvert pathsep=" " property="test-metafiles" refid="test-metafiles-fileset" />
        <java classname="org.enerj.enhancer.Enhancer" failonerror="true" fork="true">
            <classpath>
                <pathelement location="${build.dest}"/>
                <pathelement location="${asm.jar}"/>
            </classpath>
            <sysproperty key="ANT" value=""/>
            <sysproperty key="enerj.dbpath" value="databases"/>
            <arg value="--debug" />
            <arg value="--destdir" />
                <arg value="${testEnhancedClasses}" />
            <arg line="${test-metafiles}" />
        </java>
    </target>
    
    <target name="jar-agent" depends="compile-src" >
        <jar basedir="${build.dest}" includes="org/enerj/enhancer/*" manifest="${src.dir}/org/enerj/enhancer/Enhancer.mf"
        	jarfile="${agent.jar}" >
        </jar>
    </target>

    <target name="jar" depends="compile" >
        <!-- To make a standalone app: -->
        <!-- 1. Create a myapp.mf manifest somewhere. -->
        <!-- 2. Put in it two lines: -->
        <!-- Manifest-Version: 1.0 -->
        <!-- Main-Class: com.foo.Main -->
        <!-- 3. Pass to <jar>: manifest="myapp.mf" -->
        <jar basedir="${build.dest}" includes="org/**" jarfile="${build.dir}/${jarname}.jar">
            <!--exclude name="**/*.java"/ -->
        </jar>
    </target>

    <target name="all" depends="compile,javadoc,test" description="Build everything.">
        <echo message="${name} built."/>
    </target>

    <target name="test" depends="compile" description="JUnit tests" >
    	<echo>Make sure to specify "-lib lib" when running this target.</echo>
    	<mkdir dir="test-results"/>
        <delete>
            <fileset dir="test-results">
                <include name="**/*.txt"/>
            </fileset>
        </delete>
    	<junit fork="true" reloading="false" haltonerror="false" haltonfailure="false" printsummary="false" >
    		<jvmarg value="-javaagent:${agent.jar}"/>
  			<classpath>
  				<pathelement location="${build.testdest}"/>
    		    <pathelement location="${build.dest}"/>
                <pathelement location="${asm.jar}"/>
        		<pathelement location="${junit.jar}"/>
			</classpath>
    		<formatter type="xml"/>
    		<!-- test name="org.enerj.core.EnerJTransactionTest" / -->
    		<batchtest todir="test-results">
            	<fileset dir="${testsrc.dir}" casesensitive="yes">
            	  <include name="**/*Test.java"/>
              	  <include name="**/jga/**/Test*.java"/> <!-- JGA tests are named this way -->
              	  <exclude name="**/Abstract*Test.java"/>
            	</fileset>
    		</batchtest>
    	</junit>
    	
    	<!-- Format in HTML -->
    	<junitreport todir="test-results">
    	    <fileset dir="test-results">
    	      <include name="TEST-*.xml" />
    	    </fileset>
    	    <report todir="test-results" />
		</junitreport>
    </target>

    <target name="javadoc" depends="init" description="Javadoc">
        <mkdir dir="${apidocs.dir}"/>
        <javadoc destdir="${apidocs.dir}" source="${sourceLevel}" additionalparam="-breakiterator" packagenames="org.*">
            <sourcepath>
                <pathelement location="${src.dir}"/>
            </sourcepath>
        </javadoc>
    </target>

    <target name="clean" depends="init" description="Clean all build products." >
        <delete>
            <fileset dir="test-results">
                <include name="**/*.txt"/>
            </fileset>
        </delete>
        <delete dir="${build.dest}" />
        <delete dir="${build.testdest}" />
        <delete dir="${apidocs.dir}"/>
    </target>
	
	<target name="requiredb" depends="init">
		<fail unless="db" message="You must specify -Ddb={database-name}"/>
	</target>
		
	<target name="browser" depends="requiredb" description="Runs the object browser.">
        <java classname="org.enerj.tools.browser.EnerJBrowser" failonerror="true" fork="true">
    		<jvmarg value="-javaagent:${agent.jar}"/>
        	<!-- jvmarg line="${jvmopts}" / -->
  			<classpath>
  				<pathelement location="${build.testdest}"/>
    		    <pathelement location="${build.dest}"/>
                <pathelement location="${asm.jar}"/>
			</classpath>
            <sysproperty key="enerj.dbpath" value="${databases.dir}"/>
            <arg value="${db}" />
        </java>
	</target>

	<target name="baseCreateDb" depends="requiredb" description="Creates a database based on an existing properties file.">
		<delete file="${databases.dir}/${db}/${db}.enerj" />
		<delete file="${databases.dir}/${db}/${db}.log" />
        <java classname="org.enerj.util.CreateDatabase" failonerror="true" fork="true">
    		<jvmarg value="-javaagent:${agent.jar}"/>
        	<!-- jvmarg line="${jvmopts}" / -->
  			<classpath>
    		    <pathelement location="${build.dest}"/>
                <pathelement location="${asm.jar}"/>
			</classpath>
            <sysproperty key="enerj.dbpath" value="${databases.dir}"/>
        	<arg value="--pre-alloc"/> <arg value="48000000"/>
            <arg value="${db}" />
        </java>
	</target>

	<target name="createDbProps" depends="requiredb" description="Creates a standard database properties file.">
		<mkdir dir="${databases.dir}/${db}" />
		
		<echo file="${databases.dir}/${db}/${db}.properties">
PagedObjectServer.PageServerClass=org.enerj.server.CachedPageServer
PagedObjectServer.LockServerClass=org.enerj.server.LockScheduler
PagedObjectServer.RedoLogServerClass=org.enerj.server.ArchivingRedoLogServer
PagedObjectServer.MaxUpdateCacheSize=256000000
PagedObjectServer.UpdateCacheInitialHashSize=100000
ArchivingRedoLogServer.logName=${enerj.dbdir}/${db}.log
ArchivingRedoLogServer.shouldArchive=true
ArchivingRedoLogServer.requestedLogSize=0
CachedPageServer.delegatePageServerClass=org.enerj.server.FilePageServer
CachedPageServer.numberOfCachedPages=10000
FilePageServer.volume=${enerj.dbdir}/${db}.enerj
FilePageServer.pageSize=8192
LockScheduler.initialNumObjs=20000
LockScheduler.deadlockAlgorithm=Waits-For
</echo>
	</target>
	
	<target name="createdb" depends="createDbProps,baseCreateDb" description="Creates a standard database by creating a properties file." />
	
	<target name="setOO7db" description="Sets the OO7 database name">
		<property name="db" value="oo7" />
	</target>
	
	<target name="loadOO7" depends="setOO7db,createdb" description="Loads the oo7 database">
		<fail unless="type" message="You must specify -Dtype={t|m|l}"/>
		<fail unless="size" message="You must specify -Dsize={3|6|9}"/>
        <java classname="org.enerj.oo7.OO7Loader" failonerror="true" fork="true" >
    		<jvmarg value="-javaagent:${agent.jar}"/>
        	<jvmarg line="${jvmopts}" />
  			<classpath>
  				<pathelement location="${build.testdest}"/>
    		    <pathelement location="${build.dest}"/>
                <pathelement location="${asm.jar}"/>
			</classpath>
            <sysproperty key="enerj.dbpath" value="${databases.dir}"/>
            <arg value="${db}" />
        	<arg value="${type}" />
        	<arg value="${size}" />
        </java>
	</target>

	<target name="benchmarkOO7" depends="requiredb" description="Benchmarks the oo7 database">
        <java classname="org.enerj.oo7.OO7Bench" failonerror="true" fork="true" >
    		<jvmarg value="-javaagent:${agent.jar}"/>
        	<jvmarg line="${jvmopts}" />
  			<classpath>
  				<pathelement location="${build.testdest}"/>
    		    <pathelement location="${build.dest}"/>
                <pathelement location="${asm.jar}"/>
			</classpath>
            <sysproperty key="enerj.dbpath" value="${databases.dir}"/>
            <arg value="${db}" />
        </java>
	</target>
</project>

$Header: /cvsroot/ener-j/ener-j/test/org/enerj/enhancer/Tests.txt,v 1.3 2005/08/12 02:56:44 dsyrstad Exp $

Enhancer Tests:

+ Enhancement of PersistentAware:
    + PersistentAware interface added.
    + No added special constructor.
    + No added EnerJ fields or methods.
    + Constructor and other methods enhanced for getfield/putfield changes,
      but only for persistent fields of the referenced class. test by execution of code
      setting flags, etc.

+ Enhancement of Top-level Persistable:
    + Call to PersistableHelper from class-defined constructor. (New field should get set). 
    + The super-class constructor call should be augmented even if there are general bytecodes before it 
      (e.g., super( (someArg == null ? "" : someArg) ).
    + Added methods for EnerJ fields, added EnerJ fields.
    o Code should only be added to the class-defined constructor that explicitly calls the super-class constructor.
      Constructors which invoke "this(...)" should not be modified. (Don't know how to test w/o examining bytecode)
      Tested manually on 7/26/02 by dumping the bytecode. It looks correct.
    + As derived from non-PersistentAware class java.lang.Object
    + As derived from non-PersistentAware class and also non-java.* class
    + As derived from PersistenceAware class.
    + As derived from SCO class. SCO info is not persisted.
    + As derived from special FCO class (java.util.ArrayList). Special FCO is not persisted.
    + As derived from non-Persistable super class with private or non-existent no-arg constructor and
      the Persistable class has no no-arg constructor.
      This should be an error, but detected at class load time (runtime)
      since enhancer has no control over non-persistent classes (it doesn't monitor them).
    + As derived from non-Persistable super class with private or non-existent no-arg constructor, but
      the Persistable class has a no-arg constructor.
    + Read/write object should not call super.xxx (class loading should 
      detect this since super class will not have these methods).

+ Enhancement of Non-top-level Persistable:
    + No added methods for EnerJ fields, no added EnerJ fields.
    o No call to PersistableHelper from constructor. (done thru superclass).
      7/26/02 - Can't test without going thru bytecodes. Manually inspected.
    + Super class must be Persistable (either via meta or schema). Test that it implements
      the interface.
    + As derivied from a top-level Persistable
    + As derivied from a non-top-level Persistable (3rd Persistable in hierarchy).
    + Read/write object must call super.xxx. This is tested
      by the common Persistable tests when the total size is checked.

- Enhancement of all Persistables (common tests): 
    + Derive above two tests from this one.
    + Added special constructor.
    + getfield/putfield substitution, but only for persistent fields.
      Tested two ways: 1) thru method generation checks in TLP and NTLP, 2) thru
      calling someMethod and checkin the modified status. This ensures that a call to
      a non-existent method for the static field is not generated and that a call is 
      generated for the persistent field (by the fact that the object is marked as modified).
    + Added get/set methods for persistent fields. Check proper naming of methods. Check
      access level same as field. It should be static. Check return type against field type.
    + Persistable interface added.
    + read/write object methods (via method name params passed from NTLP and TLP).
    + The size of buffer written by enerj_WriteObject should be the sum of this and all super-classes and should
      only include persistent fields.
    o <clinit> should not be enhanced. Can't test without examining bytecodes. Manually checked - OK.
    + Test persist to a byte buffer and back. Test size written to buffer against known size
      to check for underflow. Cases:
      + Just top-level persistable (via TLP).
      + Non-top-level. Make sure info from both classes is persisted. (via NTLP)
      + As derived from SCO class (e.g. java.util.Date). Make SCO info is _not_ persisted. (Via TLPTestClass2)
      + As derived from Special FCO (java.util.ArrayList). TLPTestClass4. Special FCO is not persisted.
    + A PersistentAware deriving from a Persistable. PersistentAware fields should not be persisted. 
      Class itself cannot be persisted.
    + Regular class subclassing Persistable. Regular class fields should not be persisted.
      Class itself cannot be persisted.

    + Test hollow. Should call enerjPreHollow if it exists (try both ways). Should call
      super.enerj_Hollow if not a top-level persistable.
    + Test invocation of enerjPostLoad/enerjPreStore/enerjPostStore callbacks (enerjPreHollow tested with Hollow).
    + Test clone. Should be marked new, not modified, not loaded. OID should be different
      than cloning object.
    + Test TL Persistable with super class other than Object that does not implement clone() (nor does TLP).
      Make sure super.clone() is generated properly.
    + Set a value on an object null object field. Tests enerj_Set_ null handling.
      Set null on an object field when it previously not null (set it non-null, then null). 
      Tests enerj_Set_ null handling. (SetFieldTest)

- Detection of persistent fields:
    + static and final fields are never persistent.
    + transient are not persistent unless overridden by metadata (test transient field overridden "false",
      non-transient field overridden "true", and transient field not overridden).
    + All non-static, non-final, and non-transient fields are persistent unless overridden by metadata to
      say transient=true.
    + test all primitive types (persistent)
    + test various object types, including arrays, Object refs, etc.
    + A field defined as "transient=false" but has a non-persistable type (static or final), should generate an error.
      It should _not_ be an error for a static or final field to be specified as "transient=true"
    + Field override specified in metadata, but field doesn't actaully exist on class, should generate an error.


- Non-Persistable classes:
    + Called out and not called out (via package and default) in the meta data as persistent=not 
      Should not be enhanced and not be in the --destdir. (tested via other tests).

- Metadata file errors:
    + syntax errors
    + bad property keys and values

- Metadata general:
    + Test '*' defaults. 
    + Package specified as persistent=capable by default. All classes in package should be enhanced.
      Test "interface" - picked up by package-level persistent=capable default. Should not
      be enhanced.
    + Classes and packages called out explicitly in meta data must exist in sourcepath.
    Classes must be .class files. Packages must be directories. Test missing classes and packages.

- Enhancer General:
    + No classes enhanced in source path. Warning only.
    + --destdir option (tested via other tests)
    + --sourcepath and --destdir missing parameter
    + Defaults for options (--sourcepath = java.lang.classpath, --destdir = .). 
    + Nonexistent metadata file should generate error.
    + --inplace option
    + --sourcepath: multiple directories (single directory case already test by other tests).
    + Multiple metadata files - classes from all files should be enhanced as specified.
    + Zero metadata files (error)
    + --help
    + Bad option
    + No options
    + Exit values on success and error (tested via various other successful and errant tests).


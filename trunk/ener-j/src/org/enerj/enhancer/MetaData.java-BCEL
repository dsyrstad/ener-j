// Ener-J Enhancer
// Copyright 2001, 2002 Visual Systems Corporation
// $Header: /cvsroot/ener-j/ener-j/src/org/enerj/enhancer/MetaData.java-BCEL,v 1.3 2005/08/12 02:56:49 dsyrstad Exp $

package org.enerj.enhancer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.StreamTokenizer;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

import org.apache.bcel.Repository;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.enerj.core.ClassVersionSchema;
import org.enerj.core.LogicalClassSchema;
import org.enerj.core.Schema;

/**
 * Enhancer MetaData representation.
 *
 * @version $Id: MetaData.java-BCEL,v 1.3 2005/08/12 02:56:49 dsyrstad Exp $
 * @author <a href="mailto:dsyrstad@ener-j.org">Dan Syrstad</a>
 */
class MetaData
{
    /** Primitive types followed by the corresponding DataInput/Output suffix to use
     * for reading and writing. These are used to load sPrimitiveTypesMap.
     */
    private static final String[] sPrimitiveTypes = {
        "B", "Byte",
        "Z", "Boolean",
        "C", "Char",
        "S", "Short",
        "I", "Int",
        "J", "Long",
        "F", "Float",
        "D", "Double",
    };

    /** Map keyed by primitive type JVM names with a value of the DataInput/Output read/write suffix */
    private static HashMap sPrimitiveTypesMap = null;
    
    // Context used while parsing
    private String mCurrentFileName;
    private StreamTokenizer mTokenizer;

    /** General defaults. The default is persistable. */
    private ClassDef mDefaultClassDef = new ClassDef("*", ClassDef.TYPE_CAPABLE, new FieldDef[0], null);
    
    /** Map of ClassDefs by package name. These are package defaults. Key is pacakge name, value is ClassDef. */
    private HashMap mPackageDefaultsMap = new HashMap(50, 1.0F);
    
    /** Map of ClassDefs by class name explicitly specified in the metadata. Key is class name, value is ClassDef. */
    private HashMap mClassDefMap = new HashMap(1000, 1.0F);
    
    /** 
     * A map of all classes in the source path that are enhanceable.
     * Key is class name, value is file name.
     */
    private HashMap mAllClassMap = new HashMap(10000, 1.0F);

    /** The current database schema. Null if none. */
    private Schema mSchema = null;
    
    /** The parsed source class path directories */
    private File[] mSourceDirs;


    //----------------------------------------------------------------------
    /**
     * Construct a new MetaData model using the specified property files and
     * source path.
     *
     * @param aPropFileList the Ener-J property files names - a List of Strings.
     * @param aSourcePath the source path where .class files are found.
     * @param aSchema the existing database schema. May be null if no database is used.
     *
     * @throws Exception if there is an error parsing a property file.
     */
    MetaData(List aPropFileList, String aSourcePath, Schema aSchema) throws Exception
    {
        // Initialize TypeInfo maps.
        if (sPrimitiveTypesMap == null) {
            sPrimitiveTypesMap = new HashMap(sPrimitiveTypes.length / 2, 1.0F);
            for (int i = 0; i < sPrimitiveTypes.length; i += 2) {
                sPrimitiveTypesMap.put(sPrimitiveTypes[i], sPrimitiveTypes[i + 1]);
            }
        }
        
        mSchema = aSchema;
        
        StringTokenizer pathTokens = new StringTokenizer(aSourcePath, File.pathSeparator);
        mSourceDirs = new File[ pathTokens.countTokens() ];
        for (int i = 0; i < mSourceDirs.length; i++) {
            mSourceDirs[i] = new File( pathTokens.nextToken() );
        }
        
        Iterator propFiles = aPropFileList.iterator();
        while (propFiles.hasNext()) {
            parsePropFile((String)propFiles.next());
        }
    }

    //----------------------------------------------------------------------
    /**
     * Gets an iterator of all the enhancable classes found in the sourcepath.
     *
     * @return an Iterator that returns Strings representing a class name.
     */
    Iterator getAllSourceClasses()
    {
        return mAllClassMap.keySet().iterator();
    }
    
    //----------------------------------------------------------------------
    /**
     * Gets the sourcepath file name of the specified class.
     *
     * @param aClassName the class name.
     *
     * @return the file name or null if aClassName is not an enhanceable class in the source path.
     */
    String getSourceClassFileName(String aClassName)
    {
        return (String)mAllClassMap.get(aClassName);
    }
    
    //----------------------------------------------------------------------
    /**
     * Determines if the specified class name is enhanceable (defined in the
     * metadata to be persistable or persistence aware).
     *
     * @param aClassName the class name.
     *
     * @return true if it is enhanceable, else false.
     */
    boolean isClassEnhanceable(String aClassName)
    {
        ClassDef classDef = getClassDef(aClassName);
        int type = classDef.getPersistentType();
        
        // A class is not enhanceable if it is an interface.
        if (isInterface(aClassName)) {
            return false;
        }
        
        return (type == ClassDef.TYPE_AWARE || type == ClassDef.TYPE_CAPABLE);
    }
    
    //----------------------------------------------------------------------
    /**
     * Determines if the specified class name is only PersistentAware (defined in the
     * metadata to be persistence=aware).
     *
     * @param aClassName the class name.
     *
     * @return true if it is just PersistentAware, else false.
     */
    boolean isClassOnlyPersistentAware(String aClassName)
    {
        ClassDef classDef = getClassDef(aClassName);
        int type = classDef.getPersistentType();
        
        // A class is not aware if it is an interface.
        if (isInterface(aClassName)) {
            return false;
        }
        
        return (type == ClassDef.TYPE_AWARE);
    }
    
    //----------------------------------------------------------------------
    /**
     * Converts a Java VM signature to a class name.
     *
     * @param aSignature the signature.
     *
     * @return the full class name with dot notation. If aSignature is
     *  not recognized, it is just returned.
     */
    String convertSignatureToClassName(String aSignature)
    {
        String className = aSignature;

        // Fix "L{class};" forms. Must also change the '/'s to '.'s.
        if (className.charAt(0) == 'L' && className.charAt( className.length() - 1) == ';') {
            className = className.substring(1, className.length() - 2).replace('/', '.');
        }
        
        return className;
    }
    
    //----------------------------------------------------------------------
    /**
     * Determines if the specified class name is a FCO (i.e., it 
     * implements Persistable). If the class name
     * does not exist in the source path, the database schema is checked.
     * 
     * @param aClassName the class name. May be a dot notated class name (e.g., 
     * "java.lang.Object" or a Java VM signature.
     *
     * @return true if it is persistable, else false.
     */
    boolean isClassAFCO(String aClassName)
    {
        aClassName = convertSignatureToClassName(aClassName);
        
        if (!mAllClassMap.containsKey(aClassName)) {
            if (mSchema != null && mSchema.findLogicalClass(aClassName) != null) {
                // Its in the database schema already.
                return true;
            }

            return false;
        }
        
        // A class is not persistable if it is an interface. It can be 
        // persistable if it is abstract, but only by a sub-class instance. You can
        // never instantiate an abstract class, so we don't do anyting special to
        // handle this case.
        if (isInterface(aClassName)) {
            return false;
        }
        
        ClassDef classDef = getClassDef(aClassName);
        return classDef.getPersistentType() == ClassDef.TYPE_CAPABLE;
    }
    
    //----------------------------------------------------------------------
    /**
     * Determines if the specified signature (e.g., "Z") denotes a primitive type.
     *
     * @param aSignature the Java VM signature to check.
     * 
     * @return true if it represents a primitive type.
     */
    boolean isPrimitive(String aSignature)
    {
        return sPrimitiveTypesMap.containsKey(aSignature);
    }
    
    //----------------------------------------------------------------------
    /**
     * Gets the corresponding DataInput/Output read/write method suffix for
     * aSignature.
     *
     * @param aSignature the Java VM signature to check. Must be a primitive type.
     * 
     * @return the suffix (e.g., "Byte"), or null if aSignature is not a primitive type.
     */
    String getPrimitiveDataInOutSuffix(String aSignature)
    {
        return (String)sPrimitiveTypesMap.get(aSignature);
    }
    
    //----------------------------------------------------------------------
    /**
     * Gets the overrides, if any, for a field as defined by the metadata.
     *
     * @param aClassName the name of the class that the field is contained in.
     * @param aFieldName the name of the field.
     *
     * @return a FieldDef declaring the overrides, or null if no overrides were
     *  specified.
     */
    FieldDef getFieldOverrides(String aClassName, String aFieldName)
    {
        ClassDef classDef = getClassDef(aClassName);
        FieldDef[] fieldDefs = classDef.getFieldDefs();
        for (int i = 0; i < fieldDefs.length; i++) {
            if (fieldDefs[i].getName().equals(aFieldName)) {
                return fieldDefs[i];
            }
        }
        
        return null;
    }
    
    //----------------------------------------------------------------------
    /**
     * Ensure that the field overrides for a class are actually defined on the class.
     *
     * @param aClassName the name of the class.
     * @param allClassFields all of the BCEL Fields defined on the class.
     *
     * @throws Exception if a field override does not exist on the class.
     */
    void validateFieldOverrides(String aClassName, Field[] allClassFields) throws Exception
    {
        ClassDef classDef = getClassDef(aClassName);
        FieldDef[] fieldDefs = classDef.getFieldDefs();
        for (int overrideIdx = 0; overrideIdx < fieldDefs.length; overrideIdx++) {
            String fieldOverrideName = fieldDefs[overrideIdx].getName();
            
            boolean found = false;
            for (int fieldIdx = 0; fieldIdx < allClassFields.length; ++fieldIdx) {
                if (fieldOverrideName.equals( allClassFields[fieldIdx].getName() )) {
                    found = true;
                    // If override say transient=false, make sure BCEL field is not declared static nor final because
                    // these types are always non-persistent.
                    if (fieldDefs[overrideIdx].getPersistentOverride() == FieldDef.PERSISTENT_YES &&
                        (allClassFields[fieldIdx].isStatic() || allClassFields[fieldIdx].isFinal()) ) {
                        throw new Exception("Metadata field override " + fieldOverrideName + 
                            " on class " + aClassName + " incorrectly attempts to make a static or final field persistent.");
                    }
                    
                    break;
                }
            }
            
            if (!found) {
                throw new Exception("Metadata field override " + fieldOverrideName + " is not an actual field on class " + aClassName);
            }
        }
    }
    
    //----------------------------------------------------------------------
    /**
     * Determines if a field is persistent. If the specified class is found 
     * in the source path, the metadata and/or BCEL Field definition is used
     * to determine persistability. If the class is not in the source path, the
     * database schema is used to determine persistability. 
     *<p>
     * EnerJ will attempt to persist all fields of a class that are not marked static, final,
     * transient, or are marked "transient=false" in the metadata. At runtime, 
     * if EnerJ tries to persist a field
     * and the field contains an object that is not an SCO nor a FCO, EnerJ throws 
     * org.odmg.ClassNotPersistenceCapableException.
     *
     * @param aClassName the name of the class that the field is contained in.
     * @param aFieldName the name of the field.
     * @param aBcelField the BCEL Field definition. If this is null, BCEL is
     *  queried for the field defintion. So this parameter is simply an optimization.
     *
     * @return true if the field is persistent, else false.
     */
    boolean isFieldPersistent(String aClassName, String aFieldName, Field aBcelField)
    {
        // If the _containing_ class of the field is not persistable, neither is the field.
        if (!isClassAFCO(aClassName)) {
            return false;
        }

        // If the class is in the database, lookup the persistent fields there.
        if (mSchema != null) {
            LogicalClassSchema logicalClass = mSchema.findLogicalClass(aClassName);
            if (logicalClass != null) {
                ClassVersionSchema classVersion = logicalClass.getLatestVersion();
                String[] fields = classVersion.getPersistentFieldNames();
                for (int i = 0; i < fields.length; i++) {
                    if (aFieldName.equals(fields[i])) {
                        return true;
                    }
                }

                // Class is in schema, but the requested field is not persistent.
                return false;
            }
        }

        if (aBcelField == null) {
            // Need to get the BCEL Field info.
            JavaClass javaClass = Repository.lookupClass(aClassName);

            if (javaClass != null) {
                Field[] fields = javaClass.getFields();
                for (int i = 0; i < fields.length; i++) {
                    if (fields[i].getName().equals(aFieldName)) {
                        aBcelField = fields[i];
                        break;
                    }
                }
            }
        }

        if (aBcelField == null) {
            return false;
        }
        
        // Static or final fields are never persistent
        if (aBcelField.isStatic() || aBcelField.isFinal()) {
            return false;
        }

        FieldDef fieldDef = getFieldOverrides(aClassName, aFieldName);

        if (fieldDef != null) {
            // If "transient=" was specified, use it to determine the override.
            int persistentOverride = fieldDef.getPersistentOverride();
            if (persistentOverride != FieldDef.PERSISTENT_USE_FIELDDEF) {
                return persistentOverride == FieldDef.PERSISTENT_YES;
            }
        }
        
        return !aBcelField.isTransient();
    }
    
    //----------------------------------------------------------------------
    /**
     * Determines if a specified class is an interface.
     *
     * @param aClassName the class name.
     *
     * @return true if it is, else false.
     */
    private boolean isInterface(String aClassName)
    {
        JavaClass javaClass = Repository.lookupClass(aClassName);
        if (javaClass == null) {
            return false;   // We don't really know what it is
        }
        
        return javaClass.isInterface();
    }
    
    //----------------------------------------------------------------------
    /**
     * Gets the ClassDef for a class.
     *
     * @param aClassName the class name.
     *
     * @return a ClassDef. Due to default ClassDefs, the class name may not 
     *  be accurate. If you need it to be accurate, clone the ClassDef and
     *  set the class name.
     */
    private ClassDef getClassDef(String aClassName)
    {
        // Progressively work back thru explicit class defs, package defs, and finally 
        // return the default def if no others are found.
        ClassDef classDef = (ClassDef)mClassDefMap.get(aClassName);
        if (classDef != null) {
            return classDef;
        }
        
        String packageName;
        int lastDot = aClassName.lastIndexOf('.');
        if (lastDot >= 0) {
            packageName = aClassName.substring(0, lastDot);
        }
        else {
            packageName = "DEFAULT";
        }

        classDef = (ClassDef)mPackageDefaultsMap.get(packageName);
        if (classDef != null) {
            return classDef;
        }
        
        return mDefaultClassDef;
    }
    
    //----------------------------------------------------------------------
    /**
     * Load mAllClassMap with all of the class names in aDirectory.
     *
     * @param aBaseDirectory the top-level directory where the scan started.
     * @param aDirectory the directory to recursively scan.
     * @param shouldRecurse if true aBaseDirectory is recursively scanned.
     *
     * @throws Exception if an error occurs.
     */
    private void loadAllClassNames(String aBaseDirectory, File aDirectory, boolean shouldRecurse) throws Exception
    {
        if (!aDirectory.isDirectory()) {
            return;
        }
        
        File[] files = aDirectory.listFiles();
        if (files == null) {
            return;
        }
        
        for (int i = 0; i < files.length; i++) {
            String fullPath = files[i].getAbsolutePath();
            if (files[i].isFile()) {
                if (fullPath.endsWith(".class")) {
                    // "- 6" strips off ".class". Then strip off leading source directory, "+ 1" skips separator.
                    // Then convert all separators to '.'
                    String className = fullPath.substring(0, fullPath.length() - 6).
                            substring(aBaseDirectory.length() + 1).
                            replace(File.separatorChar, '.');

                    if (!mAllClassMap.containsKey(className)) {
                        mAllClassMap.put(className, fullPath);
                    }
                }
            }
            else if (files[i].isDirectory() && shouldRecurse) {
                // Add to list of package names.
                String packageName = fullPath.substring(aBaseDirectory.length() + 1).replace(File.separatorChar, '.');

                // A directory, recurse
                loadAllClassNames(aBaseDirectory, files[i], shouldRecurse);
            }
        }
    }

    //----------------------------------------------------------------------
    /**
     * Determine if aClassName is really a class in the sourcepath.
     *
     * @param aClassName a class name in dotted form.
     *
     * @return the full file name of the class in the sourcepath, or null
     *  if it doesn't exist in the sourcepath.
     */
    private String getSourcePathClassName(String aClassName)
    {
        for (int i = 0; i < mSourceDirs.length; i++) {
            File classFile = new File(
                mSourceDirs[i].getAbsolutePath() + File.separatorChar + 
                    aClassName.replace('.', File.separatorChar) + ".class" );
            if (classFile.isFile()) {
                return classFile.getAbsolutePath();
            }
        }

        return null;
    }

    //----------------------------------------------------------------------
    /**
     * Determine if aPackageName is really a package in the sourcepath.
     *
     * @param aPackageName a package name in dotted form.
     *
     * @return true if it is, else false.
     */
    private boolean isSourcePathPackageName(String aPackageName)
    {
        for (int i = 0; i < mSourceDirs.length; i++) {
            File classFile = new File(
                mSourceDirs[i].getAbsolutePath() + File.separatorChar + 
                    aPackageName.replace('.', File.separatorChar));
            if (classFile.isDirectory()) {
                return true;
            }
        }
        
        return false;
    }
    
    //----------------------------------------------------------------------
    /**
     * Parse a property file into our model.
     *
     * @param aPropFileName the property file to be parsed.
     *
     * @throws Exception if an error occurs
     */
    private void parsePropFile(String aPropFileName) throws Exception
    {
        mCurrentFileName = aPropFileName;
        FileReader fileReader = new FileReader(aPropFileName);
        try {
            mTokenizer = new StreamTokenizer( new BufferedReader(fileReader) );
            mTokenizer.resetSyntax();
            // @todo we should verify java identifier syntax here.
            // @todo I think unicode letters and numbers are allowed.
            mTokenizer.wordChars('a', 'z');
            mTokenizer.wordChars('A', 'Z');
            mTokenizer.wordChars('0', '9');
            mTokenizer.wordChars('_', '_');
            mTokenizer.wordChars('.', '.');
            mTokenizer.wordChars('*', '*');
            mTokenizer.wordChars('$', '$'); // For inner classes
            mTokenizer.wordChars(128 + 32, 255);
            mTokenizer.whitespaceChars(0, ' ');
            mTokenizer.commentChar('#');
            mTokenizer.commentChar(';');

            parseTopLevelSections();
        }
        finally {
            fileReader.close();
        }
       
    }
    
    //----------------------------------------------------------------------
    /**
     * Generate a error message via an exception.
     */
    private Exception generateError(String aMsg) 
    {
        return new Exception("Error: " + mCurrentFileName + " at line " + mTokenizer.lineno() + ": " + aMsg);
    }
    
    //----------------------------------------------------------------------
    /**
     * Expects to parse a series of "class" sections.
     */
    private void parseTopLevelSections() throws Exception
    {
        int tokenType;
        
        while ((tokenType = mTokenizer.nextToken()) != StreamTokenizer.TT_EOF) {
            if (tokenType == StreamTokenizer.TT_WORD && mTokenizer.sval.equals("class")) {
                parseClass();
            }
            else {
                throw generateError("Expected 'class', got " + mTokenizer.sval);
            }
        }
    }

    //----------------------------------------------------------------------
    /**
     * Having parsed a "class" token, parse the rest of the section.
     */
    private void parseClass() throws Exception
    {
        if (mTokenizer.nextToken() != StreamTokenizer.TT_WORD) {
            throw generateError("Expected class name, package name, or '*'");
        }

        String className = mTokenizer.sval;
        
        List pairList = parseKeyValuePairs();
        Iterator pairs = pairList.iterator();
        // Default.
        int persistentType = ClassDef.TYPE_CAPABLE;
        while (pairs.hasNext()) {
            Pair pair = (Pair)pairs.next();
            // The only key ODMG 3.0 defines is "persistent"
            if (pair.mKey.equals("persistent")) {
                if (pair.mValue.equals("capable")) {
                    persistentType = ClassDef.TYPE_CAPABLE;
                }
                else if (pair.mValue.equals("not")) {
                    persistentType = ClassDef.TYPE_NOT_CAPABLE;
                }
                else if (pair.mValue.equals("aware")) {
                    persistentType = ClassDef.TYPE_AWARE;
                }
                else if (pair.mValue.equals("serialized")) {
                    throw generateError("'serialized' is not supported by Ener-J.");
                }
                else {
                    throw generateError("Unrecognized persistent value '" + pair.mValue + "'.");
                }
            }
            else {
                throw generateError("Unrecognized class key '" + pair.mKey + "'.");
            }
        }
        
        FieldDef[] fieldDefs = parseFieldDefs();
        ClassDef classDef = new ClassDef(className, persistentType, fieldDefs, null);
        
        // Check if class name is '*' or a package name. '*' means we have to 
        // recursively descend the hierarchies of the sourcepath and add all classes 
        // we find with this default definition. A package name, implicitly denoted by 
        // finding a matching directory name somewhere in the sourcepath, means we
        // have to add all classes in the directory using this ClassDef.
        // If the class name really is just a class name, then it can override a 
        // previously added defintion.
        String fileName;
        if (className.equals("*")) {
            mDefaultClassDef = classDef;
            if (persistentType == ClassDef.TYPE_CAPABLE || persistentType == ClassDef.TYPE_AWARE) {
                for (int i = 0; i < mSourceDirs.length; i++) {
                    loadAllClassNames(mSourceDirs[i].getAbsolutePath(), mSourceDirs[i], true);
                }
            }
        }
        else if ( (fileName = getSourcePathClassName(className)) != null) {
            // It's a class name. If already in map, remove it first.
            if (mClassDefMap.containsKey(className)) {
                mClassDefMap.remove(className);
            }

            mClassDefMap.put(className, classDef);
            mAllClassMap.put(className, fileName);
        }
        else if (isSourcePathPackageName(className)) {
            // It's a package name. If already in map, remove it first.
            String packageName = className;
            if (mPackageDefaultsMap.containsKey(packageName)) {
                mPackageDefaultsMap.remove(packageName);
            }

            mPackageDefaultsMap.put(packageName, classDef);
            if (persistentType == ClassDef.TYPE_CAPABLE || persistentType == ClassDef.TYPE_AWARE) {
                for (int i = 0; i < mSourceDirs.length; i++) {
                    loadAllClassNames(mSourceDirs[i].getAbsolutePath(), mSourceDirs[i], false);
                }
            }
        }
        else {
            throw generateError(className + " is neither a class file nor package (directory) name in the sourcepath.");
        }
    }
    
    //----------------------------------------------------------------------
    /**
     * Parse zero or more "field" sections.
     */
    private FieldDef[] parseFieldDefs() throws Exception
    {
        LinkedList fieldDefs = new LinkedList();
        int tokenType;
        while ((tokenType = mTokenizer.nextToken()) != StreamTokenizer.TT_EOF) {
            if (tokenType == StreamTokenizer.TT_WORD && mTokenizer.sval.equals("class")) {
                mTokenizer.pushBack();
                break;
            }

            if (tokenType == StreamTokenizer.TT_WORD && mTokenizer.sval.equals("field")) {
                tokenType = mTokenizer.nextToken();
                if (tokenType != StreamTokenizer.TT_WORD) {
                    throw generateError("Excpected field name to follow 'field'");
                }
                
                String fieldName = mTokenizer.sval;
                int persistentOverride = FieldDef.PERSISTENT_USE_FIELDDEF;
                String refersTo = null;
                String inverse = null;
                Iterator pairs = parseKeyValuePairs().iterator();
                while (pairs.hasNext()) {
                    Pair pair = (Pair)pairs.next();
                    if (pair.mKey.equals("transient")) {
                        if (pair.mValue.equals("true")) {
                            persistentOverride = FieldDef.PERSISTENT_NO;
                        }
                        else if (pair.mValue.equals("false")) {
                            persistentOverride = FieldDef.PERSISTENT_YES;
                        }
                        else {
                            throw generateError("Expected 'true' or 'false' for 'transient='");
                        }
                    }
                    else if (pair.mKey.equals("refersTo")) {
                        refersTo = pair.mValue;
                    }
                    else if (pair.mKey.equals("inverse")) {
                        inverse = pair.mValue;
                    }
                    else {
                        throw generateError("Expected 'transient', 'refersTo', or 'inverse'. Got '" + pair.mKey + "'.");
                    }
                } // End while...pairs
                
                fieldDefs.add( new FieldDef(fieldName, persistentOverride, refersTo, inverse) );
            }
            else {
                throw generateError("Expected 'field', got " + mTokenizer.sval);
            }
        } // End while...token
        
        FieldDef[] fieldDefArray = new FieldDef[ fieldDefs.size() ];
        fieldDefs.toArray(fieldDefArray);
        
        return fieldDefArray;
    }
    
    //----------------------------------------------------------------------
    /**
     * Parse a set of key/value pairs until we see "class" or "field".
     *
     * @return a List of Pair, which may be empty.
     *
     * @throws Exception if an error occurs.
     */
    private List parseKeyValuePairs() throws Exception
    {
        LinkedList pairs = new LinkedList();

        int tokenType;
        while ((tokenType = mTokenizer.nextToken()) == StreamTokenizer.TT_WORD) {
            if (mTokenizer.sval.equals("class") || mTokenizer.sval.equals("field")) {
                mTokenizer.pushBack();
                break;
            }
            
            String key = mTokenizer.sval;
            if (mTokenizer.nextToken() != '=') {
                throw generateError("Expected '='");
            }
            
            if (mTokenizer.nextToken() != StreamTokenizer.TT_WORD) {
                throw generateError("Expected a value");
            }
            
            String value = mTokenizer.sval;
            pairs.add( new Pair(key, value) );
        }
        
        return pairs;
    }

    //----------------------------------------------------------------------
    //----------------------------------------------------------------------
    /**
     * A key/value pair.
     */
    private static final class Pair
    {
        String mKey;
        String mValue;

        //----------------------------------------------------------------------
        Pair(String aKey, String aValue) 
        {
            mKey = aKey;
            mValue = aValue;
        }
    }
}

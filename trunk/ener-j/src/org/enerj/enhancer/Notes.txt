$Header: /cvsroot/ener-j/ener-j/src/org/enerj/enhancer/Notes.txt,v 1.3 2005/08/12 02:56:49 dsyrstad Exp $


Notes:
------

- EnerJ will attempt to persist all fields of a class that are not marked static, final,
  transient, nor are marked "transient=true" in the metadata. This is slightly different
  behaviour than ODMG Java Binding (as far as I can tell). If EnerJ tries to persist a field
  and the field contains an object that is not an SCO nor a FCO, EnerJ throws 
  org.odmg.ClassNotPersistenceCapableException.

- Callback hooks optionally implemented on Persistable objects:
{any scope} void enerjPostLoad() - invoked after loading the object's fields
{any scope} void enerjPreStore() - invoked prior to storing the object's, and object's super-class, fields.
{any scope} void enerjPostStore() - invoked after storing the object's fields. Possibly used to
    undo special setup done by enerjPreStore().
{any scope} void enerjPreHollow() - invoked prior to hollowing of object and prior to hollowing 
    of super-class. Possible use is to allow object to hollow transient fields.

- Mutable SCO Subclasses: These maintain a FCO owner so that the FCO can be marked dirty
  if the SCO is modified. They are only created via enerj_ReadObject.

  - What happens if an app tries to modify the unwrapped version of an owned SCO? 
    The only case where the application could have access to an unwrapped SCO
    that is owned by an FCO is if the app newed an SCO and set it on an FCO (or it
    is a parameter to a constructor). The
    act of setting it on an FCO causes the FCO to be marked modified (or it is
    marked 'new' via the constructor). So we don't
    need to track further mods on the non-subclassed SCO. In all other
    cases, owned SCOs come from an FCO and they are the SCO subclass versions.
  
  - What happens if an app sets a subclassed SCO on a different FCO (or as a param
    to a constructor)? 
    The FCO is marked modified. The FCO, at this point, does not need to track
    further modifications to the SCO. However, reawakening an existing FCO in a new transaction
    is another problem. JDO specifies for Optimistic transactions that, on commit, 
    all SCOs be copied. At this time they could be subclassed with new owners.

  - What happens if there is a collection of SCOs and one of the elements of the 
    collection (a mutable SCO - SCO[n]) is modified? SCO[n] must mark the FCO owning the collection
    as dirty. The
    act of adding to a subclassed SCO collection will cause the FCO to be marked.
    However, enerj_ReadObject will need to recursively wrap mutable SCOs. This way, when
    a sub-collection of collection of collections is modified, the FCO will be marked.


- SCOs Supported:

  -Immutable SCOs:
java.lang.Byte
java.lang.Boolean
java.lang.Character
java.lang.Short
java.lang.Integer
java.lang.Long
java.lang.Float
java.lang.Double
java.lang.String
java.math.BigDecimal
java.math.BigInteger
java.util.Locale

  -Mutable SCOs - any field with an object with a concrete type of:
[ - Java arrays of primitive types (mutable)
[ - Java arrays of SCOs, including other arrays(multidimensional) (mutable)
[ - Java arrays of FCOs  (mutable)

+java.util.Date
+java.sql.Date
+java.sql.Time
+java.sql.Timestamp

+java.util.ArrayList (CANNOT get capacity)
+java.util.LinkedList (persist using ArrayList code)
+java.util.TreeSet (persist optional Comparator - as class name string - Comparator must have public no-arg constructor)
+java.util.Vector (persist using ArrayList code)
+java.util.Stack (persist using Vector code)
+java.util.HashSet
+java.util.LinkedHashSet

+java.util.HashMap
+java.util.Hashtable
+java.util.LinkedHashMap
+java.util.Properties
+java.util.TreeMap (persist optional Comparator - as class name string - Comparator must have public no-arg constructor)
+java.util.IdentityHashMap

-Later: java.util.Calendar (abstract - this is not a Date! It can have a Timezone and Locale - Locale dictates Cal type)
    java.util.GregorianCalendar

- Collections/Maps can contain references to FCOs or SCOs.

- Java arrays are SCOs, but the owning FCO must be manually marked as modified if
  the contents of the array changes. >>This should be mediatated.

- You _can_ have an SCO as a super-class type of a Persistable, however the contents
won't be persisted. You can always use aggregation/containment you want to persist 
the SCO data. Aggregation/containment will cause the SCO or
field to be persisted.

- Multiple references to a single SCO within an owner FCO are still shared when the owner FCO is
  loaded from the DB. However, Multiple references to a single SCO across multiple FCOs are not shared
  across the FCOs, only within each FCO. This is because SCOs only have an identity local to their owner
  FCO.

Here are some notes from Versan t's JVI doc:
-------
What are Second Class Objects (SCOs)?

A Second Class Object (SCO) is an object embedded in an FCO. An SCO has its own identity in Java 
(i.e. derives from java.lang.Object), but does not have its own identity (LOID) in the database. 
Therefore the only way an SCO can get stored in the database is through an FCO that "owns" it.

The three basic types of Java classes which are SCOs are:

   1. Classes that map naturally to VERSANT attribute types such as: Strings, Arrays of simple types, 
    such as integers, characters, and floating point numbers.
   2. Classes that receive special treatment from the enhancer. The primary example of this type of 
    SCO is com.versant.util.DVector.
   3. Classes not included in the two previous categories are serialized with the Java serialization 
    mechanism. These types of SCOs must implement the java.io.Serializable or java.io.Externalizable interface.

If an FCO has an attribute which is a reference to a Persistent Aware 'a' or Not Persistent 'n' 
category instance, then, the attribute is serialized and stored to the database. JVI actually follows a t
echnique of serialization termed "dual serialization" to accomplish this.

What is dual serialization? or, How are Second Class Objects stored in the database?

When an SCO is stored in the database as part of an owning FCO, it is serialized. 
The technique of serializing the SCO in JVI is termed dual serialization.

Dual serialization first separates the FCOs that are part of the SCO from the rest 
of the byte stream that represents other Java objects that are being serialized. 
Then, they are written to the database as two attributes:

   1. 1.An array of bytes that holds the serialized byte stream of the SCO.
   2. An array of links that contains the references to the persistent objects 
(i.e. FCOs) contained in the SCO. If the SCO does not contain any references to persistent 
objects, this array is empty.

If you modify an SCO, will the owning FCO be written to the database?

Not always. When an application changes a SCO, the FCO that owns the SCO needs to be 
marked dirty. Marking the FCO dirty ensures that the changed SCO is written to the 
database together with the owning FCO upon a commit.

The ability to automatically dirty owning FCO instances is called SCO tracking in JVI. 
SCO tracking maintains a mapping from an SCO to the owning FCO. When an SCO is modified, 
the owning FCO is dirtied. SCO tracking automatically occurs for the following types of SCOs:

    * Arrays
    * com.versant.util.DVector
    * java.util.Vector
    * java.util.Hashtable
    * Classes categorized as Transparent Dirty Owner 'd'

For any other classes that are SCOs, the owning FCO must be manually dirtied with the 
TransSession method, dirtyObject().
-----


$Header: /cvsroot/ener-j/ener-j/src/org/enerj/core/Notes.txt,v 1.1 2005/08/16 04:24:45 dsyrstad Exp $


Notes:
------

- OLD: Does ODMG specify if Database or Transaction exceptions during a transaction affect the
  state of the transaction? I'm thinking of DeadlockWouldOccurException or some other ODMGRuntimeException
  would automagically rollback the transaction. Hmm.. ODMG and JDO are silent on this. So
  the only thing one can imply is that transactions are not automatically rolledback on
  Exception.
  
- In the database, the class id should be stored with the OID pointer. This is because when
an object is first referenced by OID, only it's class id is needed and a hollow object is created.

- OS = Object Server, PS = Page Server

- Open URIs (built-in to code):
    enerj://objserver-intf-classname[,params....]
    Examples:
    enerj://org.enerj.core.MemoryObjectServer,dbname - an example 
    enerj://org.enerj.core.LocalObjectServer,dbname,obj-server-prop-file-name[,user,pw]  - prop file configs Object Server/Page Server
    enerj://org.enerj.core.RemoteObjectServer,hostname[:port],dbname[,user,pw]

- One OS per DB and one PS per DB, but a single OS/PS could serve up multiple DBs.
  Scenarios: 
   -------
   | OS  |
   -------      
   | DB1 |----------------->(PS/DB1)
   | DB2 |----------------->(PS/DB2)
   -------
   (OS: Serving DB1 & DB2) --------> (PS/DB1 & DB2)

  - hmm - why not one page server for each volume and get rid of the extra page server/volume manager layer.
    This way a single object server can go after multiple page servers and flush to them asynchronously.
    There would be a dual-layer page cache. One in the OS for unflushed pages and one in the page server. This
    allows txns to commit by simply syncing the log, but not flushing to the page server. 
  - Q: if the txn log is intact, and the OS is restarting, how do we know if the pages were flushed
    before the last crash/shutdown (esp. if the page servers are already started)? 
    A: While the OS is shutting down, it flushes to each page server and asks each one to 
    synchronously flush its dirty cache. It waits for each to do so (may wait in parallel), writes a log entry 
    that the database was closed properly, syncs the log and exits. On restart, the log
    must have this "database closed" log entry as its very last entry.

- Queries:
    - Multiple slave query threads/servers would allow parallel collection extractions/merges/joins
      for each query operation.
    - Query cache: If query string is the same as a previous one. There are two levels: 
      1) Pre-compiled query classes (don't need to recompile/optimize); 2) cached results
      if the database modification counter hasn't changed (this counter would be updated
      on each commit).
    - Query params (e.g., " select * from X where y = %1"), can be translated to method params.

- org.odmg.Database object is NOT sharable among threads at same time (i.e., you can't
  attach the Database to more than one Txn). This doesn't serve any functional purpose.
  Another Database object can be created in a second thread which attaches to the
  same database.

- One Txn open per thread at a time. ODMG and JDO rule.

- A Persistable must not allow itself to participate in a Txn if it currently references
  a different Txn than is active. It refers to the Transaction indirectly via it's Database,
  which is bound to a transaction.

- A Persistable must not be persisted to a Database if it references a different one.
  It would be possible to set an object which references one database as a referent
  on another object which refers to a second database. Before persisting the OID with
  the second object, the database must be checked. This should be checked in ObjectSerializer.writeFCO.

- One DB per Txn, for now (but see below).

- One Txn per DB. DB must reference Txn it is participating in.

- When a Txn is created without args, it first tries to reference the Default Thread Database
  (first one open, but not closed, in this thread). If this is null, it tries to reference
  the Default Process Database (first one open, but not closed, in this process). If neither
  exist, DatabaseClosedException(?) is thrown. When a database is clsoed the defaults must
  be checked for clearing. 
- When a Txn is created with args, it references (connects to) the Database arg rather than
  the defaults. 
- In the future, a Txn could be associated with multiple DBs if Txn allowed a associateDatabase()
  method.

- JDO 5.5.1 says that a transient (but enhanced) instance referenced by persistent instances 
    causes the transient object to get _persisted_ as if it were a new instance. This means that
    objects newed outside of a transaction can later be referenced inside a transaction and they become
    new instances. EnerJDatabase.getOID(obj) handles this. So Database.makePersistent really isn't necessary.

- JDO 5.5.4 says when a new transaction is started after a commit or abort on the previous transaction, 
  a request for an OID requested in the prior transaction returns the identical Java instance in the new
  transaction unless the object has been garbage collected. This is implemented.


4/04/2004
---------
- Global cache (possibly peer-to-peer) that utilizes mem on all clients.
- Interface to O/R products, like hibernate and OJB. Provide seamless access between ODBMS and RDMBS.
- java.net/DBCollections,  java.net/accounting.
- Extents
  - We only need to keep object in one physical extent of its concrete class.
  - Extent queries are a logical concat of phy sets whose type and sub-types match the query. 
    THIS INCLUDES INTERFACE types. This is so you can query on interface types.
  - Thus each object may simply have a linked list prev/next and the version class dict points to the head.
    Ptrs must be OIDs.

- Eventually convert from BCEL to ASM and support on-the-fly bytecode gen. See hibernate.
- Be nice to support xdoclet-type params directly in source, but still need external config for no-src classes.

4/28/2004
---------
- OQL Optimizer rule language is essentially a tree pattern matcher. See LDB/OPTL
- Testing optimizer - large set of queries (generated?) that should have same result w/ optimizer on or off.
- Class can have one extent and multiple indexes.
- Must track # of objects per class
- Indexes must allow full ODL control, I.e., keyed, indexes, mapped, etc. Defines props used in index, etc.
- Could also have auto "throw-away" extents (e.g., sorted) that exist as long as the objects of the class have not
  been added, updated, or deleted.
- See OJB and Speedo for JDO apis. OJB has OQL implementation. Speedo's MEDOR has basic optimization.
- ODMG now officially declares Java binding dead in favor of JDO.

4/30/2004
---------
- Objects explicitly persisted via "makePersistent" are simply added to the extent/indexes. They
  can only be fully removed (GCable) via explicit "deletePersistent". 
- deletePersistent will remove from the extent/indexes, but if the obj is still ref'd by other objs,
  it's not GCed. 
- Need layer above OS to handle extents and indexes? Do we really want the client api to manipulate indexes?
- Move part of client API to server? e.g., Should timing of when things are locked, which affect integrity,
  be in the client API. Unless we always load the api code from the server and can guarantee that the server
  is always talking to the client api it delivered. The client code would only use a thin local jar for loading
  the api.
- Checkout apache jakarata Digester for a tree/rule pattern matcher.
- Also checkout jakarata commons: collections, lang, clazz, functor, VFS (neat), codec.
- Need settable transaction isolation levels.
- Need ODL/DDL to do things like grant, index chgs, etc.

5/20/2004
---------
- NakedObjects (nakedobjects.org) - nice idea but... UI view knowledge in biz objs, completely domain driven, no
  task/use-case driven mode. It's missing tasks completely. It operates like Photoshop or Windows or MacOS.
  - My "OpenUI" idea, like NakedObjs but no UI view knowledge in business objs. See also O2Look from O2.
  - Raw view initially presented, ala nakedobjs
  - User can customize view and create tasks (and why does nakedobj "stories" create doc on the task?
    Why not actually create the task?) 
  - User can cutomize ordering, appearance, naming, icons, and viewability of props entirely customizable on user, role,
    or default basis. 
  - Views are savable in database and user can choose from different views for different tasks, or customize
    and save their own view.
  - Only naming allowed (optionally) in biz obj via xdoclet javadoc tags. And these are resource keys to 
    human readable information (names, text, icons) in resource bundles. 
  - It's basically a dynamic, always evolving gui builder.
  - Main point is that _individual user_ can customize the UI for how _they_ work.
  - Empower users to define the way they work, while also allowing some common tasks/views to be defined.
  - Tasks/views are stored in DB.
  - Multiple view choices per users, plus 'raw' which is always available.
  - See also Morphic in Squeak (smalltalk based, obviously where nakedobjs got the idea), OOUI term, 
    Direct Manipulation Interfaces term, Expressive Systems term, Iduna (Swing-based)., Fabrik (vis prog/dataflow)
    smalltalk/apple based but being redone in Squeak by Dan Ingalls.
  - 6/2/04: Name for our "Open UI" -- "OUI" like "we" from the french. Means "yes". Also twisted could refer to "we"
    in "users".

5/24/2004
---------
- User access security to persisted objs: When class is delivered to client, inaccessible methods
  are stubbed to throw exception. Inaccessible classes do the same for all methods. Also read/writeObject
  method should just eat the buffer for inaccessible fields. Potentially should really not even get the fields in
  the buffer. Potentially all of this should really happen before the buffer leaves the server.
- Extents: each class version should track objects of that version.

- Use Windows Georgia for for text on web pages.  Nice.


Schema Versioning and Evolution Notes:
--------------------------------------
10/2002 - 11/05/2002 Notes:
---------------------------

- Each enhanced Top-level Persistable will have a delegate field. All subclasses use this
  field, so it must be declared "protected".

- When a class is initially enhanced its delegate class in the schema is empty. However,
  when the next version is enhanced, a delegate/proxy class with the exact same method signatures
  as the original class is generated and set as the delegate class of the original version 
  in the schema. Although this class has the same signatures as the original, it is really
  a proxy to the new class. Methods and fields (via enerj_Get/Set_*) which can no longer be
  supported by the new class throw exceptions. (Maybe we should call it "proxy" rather than "delegate"?).
  E.g., for an app compiled with class B Version 1, but loading a class B Version 2 object from the database:

       x() --> B(Version 1) -- x() --> B(Version 1 Proxy to Version 2) -- x() --> B(Version 2)
  
  If more than one version different, then:

       x() --> B(Version 1) -- x() --> B(Version 1 Proxy to Version 2) -- x() --> B(Version 2) -- x() --> B(Version 2 Proxy) -- x() --> B(Version 3)

  Although this appears to be a lot of indirection, it goes way when the app's software is
  upgraded.

- The delegate class is in the same package as the enhanced class, but has a different name.
  This classname must be known to the enhanced class at enhancement time (i.e., the name
  cannot be generated at runtime -- unless we use reflected - see below).

- When an enhanced class is instantiated via its constructor,
  it checks its enerj_sClassId against the latest version of the class in the database. If they are
  the same, the delegate field is null. If they are not the same, the delegate is instantiated using
  the same parameters as the current constructor. 
    - There are construction problems. In a subclass constructor, the superclasses constructor will be called first and 
      a 'new' will be attempted for a deletgate of the superclass type. But then the sub-class
      will come-along and 'new' a delegate. 
    - To solve this: implement a enerj_CheckForDelegate method on the TLP and subclasses. It will
      take care of check if a delegate is required, loading the class, and constructing it via reflection.
      Null is returned if the delegate is not needed.
      The TLP Constructor would do:
        enerj_mDelegate = enerj_CheckForDelegate(new Class[] { Integer.class, String.class /* arg types - could be pre-built in a static*/}, 
            new Object[] { new Integer(intParam), stringParam } /* constructor params */ );

      Hence in the TLP constructor, the subclass' overridden would be called.

- Each method on the the enhanced persistable, except for 
  clone (which requires the current instance and the delegate to be cloned), has the following code inserted
  at the beginning:
    public int someMethod(int arg) {
        if (enerj_mDelegate != null) {
            return enerj_mDelegate.someMethod(arg);
        }

        ... original code...
    }

    public staic void someStaticMethod(int arg) {
        if (enerj_sDelegateClass != null) {
            DelegateClassName.someStaticMethod(arg);
            return;
        }

        ... original code...
    }

    // This is on TLP _ONLY_
    public Object clone() {
        if (enerj_mDelegate != null) {
            TLP clone = (TLP)super.clone();
            clone.enerj_mDelegate = enerj_mDelegate.clone();
            return clone;
        }

        .. original/enhanced clone code...
    }

  This includes enerj_* methods. Static methods must also be enhanced. 
  - static methods: In <clinit>, check if delegate is needed, if so load the delegate
    class and set a Class field (enerj_sDelegateClass). Constructor can use this field
    to see if delegate is needed. If schema is changed after delegate
    class is loaded, how do we know to update enerj_sDelegateClass? Use a method like
    enerj_GetDelegateClass which checks each time?? Yuck.

- It's unclear how to reference the delegate class in the enhanced class. The delegate must
  be loaded from the database, but the class reference needs to be loadable from the client.
  UNLESS the delegate is declared as an Object, then cast as needed? Hmmm.. This still may cause
  the classloader to attempt loading of the delegate class when the enhanced class is loaded. And
  the JVM spec does not defined exactly when this occurs. Calling by reflection is possible, but not
  really desirable. It can't be an interface because static methods, non-public methods and constructors 
  need to be delegated. Casting is required when using the delegate in subclasses, so 
  casting will be required anyway. 

- If a _Top-level_ persistable sub-classes a non-Object class, non-final/non-static/non-private methods of 
  the superclass must be overridden in the top-level persistable so that the delegate is used if 
  present. For example, if the superclass is java.util.Date, the setTime(long time) method must be overridden like:
    public void setTime(long time) {
        if (enerj_mDelegate != null) {
            enerj_mDelegate.setTime(time);
            return;
        }

        super.setTime(time);
    }

  This _only_ has to occur for non-persistable super-class methods. If two or more non-persistable
  superclasses exist in the hierarchy, all non-final/non-static/non-private methods of all non-persistable superclasses
  must be overridden. Final and static methods are a problem that the delegate method cannot overcome
  and must be documented: avoid sub-classing from a non-persistable superclass - use containment by aggregation
  instead.

- Evolution Scenarios:  Given:

  App1 was compiled with:  B1 ---> A1
  
  Later, database schema is updated with:  B2 ---> C1 ---> A1
    but App1 is not updated with these new classes.
    (a hierarchy change in class B. B incurs a version change because developer changed class B to say
     "B extends C" rather than "B extends A")

  App2 was compiled with B2, C1, A1.

  Legend: Class A Version 1 = A1, Class B Version 1 = B2, Class B Version 2 = B2, etc. 
  "--->" = "inherits from"

  Scenarios:
  1. "new B()" (version 1) is called and B1 is latest version in the schema, no delegate is needed. B1 is used as-is
     and full debugging capabilities exist (B1 corresponds to the source).

  2. "new B()" (version 1) is called and B2 is latest version in the schema, delegate class is loaded from 
     the database and all B1 method calls (including enerj_ methods) are forwarded to the B1 delegate (which
     forwards to B2. Methods not supported by B2 throw "DefunctMethod/FieldAccessException" (a RuntimeException)
     via the delegate/proxy.

  3. Load a B2 object from the database when App1 only knows about B1 (downgrade, or transparent App1 software 
     upgrade, scenario). Same processing as #2.

  4. Load a B1 from the database while App2 uses B2 (upgrade scenario):
        - In ObjectServer, B1 values are auto-migrated to B2 version. C1 values are initialized
          to pre-defined defaults.
        - In ObjectServer, if B2 has a user-written voUpgrade method, it is called with the B1
          instance as a param (user-upgrade hook).
        - New B2 object is serialized and sent to App2.
        - App2 uses B2 object (as migrated from B1).
        - If App2 modifies B2, it replaces B1 in the database as B2 under the same OID.

- User voUpgrade method must call super.voUpgrade() as first thing so superclass fields are 
  upgraded first. This method only needs to deal with migrating from the most immediate prior
  version to this version.

Older Notes (- 10/2002):
------------------------
- The issues: 
  - An old app compiled with version 1 of class A, attempts to load an object from the 
    DB that is version 2 of class A. The old app has no knowledge of version 2. Downgrade
    must occur.
  - A new app compiled with version 2 of class A, attempts to load an object which is
    version 1 of class A. Upgrade must occur.
  - If a column is added to a RDBMS, existing apps continue to work without change. The
    same behavior (data independence) should occur in an ODBMS.
  - Under certain conditions, if a column type is changed in an RDBMS, the column
    can still be used in an old app. This will only work if the new column type is
    promotable to the old type.
  - In a RDBMS, if a stored procedure is changed, a trigger is added, or ref integrity rule
    is added, old apps are transparently upgraded to the new functionality. The same should occur with an ODBMS.

- PREMISE: The latest version of a class is _always_ the one the defines the proper functionality, 
even against old versions.

- Class returned to old app, from DB, must be _compatible_ with old version, but not necessarily the same.
  However, it must implement the new functionality.

- Likewise, a 'new' in the old app must load the "compatible" class bytes from the DB and internally operate like
the new object while masquerading as the old one. Exceptions will be thrown on old methods that are not 
supported in the new version. Also exceptions will be thrown on access to old fields that are incompatible
with the new version.

- If a logical class has objects (old or new) locked in the DB, a new class def cannot be defined
in the DB until the locks are released. This prevents new behavior from being defined while 
transactions are taking place.

- Hence a new object in the DB is never "downgraded" for an old app. Rather the old app's software is internally 
and transparently upgraded.

- Developer can defined special upgrade method ("voUpgrade") on a class which upgrades from the
most immediate previous version in the DB. If not defined, auto-migration occurs. Maybe "voDowngrade" too?

